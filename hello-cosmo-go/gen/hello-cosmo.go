// Generated by `wit-bindgen` 0.11.0. DO NOT EDIT!
package hello_cosmo

// #include "hello_cosmo.h"
import "C"

import "unsafe"

import "fmt"

type WasiPollPollPollable = uint32
type WasiIoStreamsPollable = uint32
type WasiIoStreamsStreamError struct {
  Dummy uint32
}

type WasiIoStreamsStreamStatusKind int

const (
WasiIoStreamsStreamStatusKindOpen WasiIoStreamsStreamStatusKind = iota
WasiIoStreamsStreamStatusKindEnded
)

type WasiIoStreamsStreamStatus struct {
  kind WasiIoStreamsStreamStatusKind
}

func (n WasiIoStreamsStreamStatus) Kind() WasiIoStreamsStreamStatusKind {
  return n.kind
}

func WasiIoStreamsStreamStatusOpen() WasiIoStreamsStreamStatus{
  return WasiIoStreamsStreamStatus{kind: WasiIoStreamsStreamStatusKindOpen}
}

func WasiIoStreamsStreamStatusEnded() WasiIoStreamsStreamStatus{
  return WasiIoStreamsStreamStatus{kind: WasiIoStreamsStreamStatusKindEnded}
}

type WasiIoStreamsInputStream = uint32
type WasiIoStreamsOutputStream = uint32
type WasiIoStreamsTuple2ListU8TWasiIoStreamsStreamStatusT struct {
  F0 []uint8
  F1 WasiIoStreamsStreamStatus
}

type WasiIoStreamsTuple2U64WasiIoStreamsStreamStatusT struct {
  F0 uint64
  F1 WasiIoStreamsStreamStatus
}

type WasiHttpHttpTypesInputStream = uint32
type WasiHttpHttpTypesOutputStream = uint32
type WasiHttpHttpTypesPollable = uint32
type WasiHttpHttpTypesMethodKind int

const (
WasiHttpHttpTypesMethodKindGet WasiHttpHttpTypesMethodKind = iota
WasiHttpHttpTypesMethodKindHead
WasiHttpHttpTypesMethodKindPost
WasiHttpHttpTypesMethodKindPut
WasiHttpHttpTypesMethodKindDelete
WasiHttpHttpTypesMethodKindConnect
WasiHttpHttpTypesMethodKindOptions
WasiHttpHttpTypesMethodKindTrace
WasiHttpHttpTypesMethodKindPatch
WasiHttpHttpTypesMethodKindOther
)

type WasiHttpHttpTypesMethod struct {
  kind WasiHttpHttpTypesMethodKind
  val any
}

func (n WasiHttpHttpTypesMethod) Kind() WasiHttpHttpTypesMethodKind {
  return n.kind
}

func WasiHttpHttpTypesMethodGet() WasiHttpHttpTypesMethod{
  return WasiHttpHttpTypesMethod{kind: WasiHttpHttpTypesMethodKindGet}
}

func WasiHttpHttpTypesMethodHead() WasiHttpHttpTypesMethod{
  return WasiHttpHttpTypesMethod{kind: WasiHttpHttpTypesMethodKindHead}
}

func WasiHttpHttpTypesMethodPost() WasiHttpHttpTypesMethod{
  return WasiHttpHttpTypesMethod{kind: WasiHttpHttpTypesMethodKindPost}
}

func WasiHttpHttpTypesMethodPut() WasiHttpHttpTypesMethod{
  return WasiHttpHttpTypesMethod{kind: WasiHttpHttpTypesMethodKindPut}
}

func WasiHttpHttpTypesMethodDelete() WasiHttpHttpTypesMethod{
  return WasiHttpHttpTypesMethod{kind: WasiHttpHttpTypesMethodKindDelete}
}

func WasiHttpHttpTypesMethodConnect() WasiHttpHttpTypesMethod{
  return WasiHttpHttpTypesMethod{kind: WasiHttpHttpTypesMethodKindConnect}
}

func WasiHttpHttpTypesMethodOptions() WasiHttpHttpTypesMethod{
  return WasiHttpHttpTypesMethod{kind: WasiHttpHttpTypesMethodKindOptions}
}

func WasiHttpHttpTypesMethodTrace() WasiHttpHttpTypesMethod{
  return WasiHttpHttpTypesMethod{kind: WasiHttpHttpTypesMethodKindTrace}
}

func WasiHttpHttpTypesMethodPatch() WasiHttpHttpTypesMethod{
  return WasiHttpHttpTypesMethod{kind: WasiHttpHttpTypesMethodKindPatch}
}

func WasiHttpHttpTypesMethodOther(v string) WasiHttpHttpTypesMethod{
  return WasiHttpHttpTypesMethod{kind: WasiHttpHttpTypesMethodKindOther, val: v}
}

func (n WasiHttpHttpTypesMethod) GetOther() string{
  if g, w := n.Kind(), WasiHttpHttpTypesMethodKindOther; g != w {
    panic(fmt.Sprintf("Attr kind is %v, not %v", g, w))
  }
  return n.val.(string)
}

func (n *WasiHttpHttpTypesMethod) SetOther(v string) {
  n.val = v
  n.kind = WasiHttpHttpTypesMethodKindOther
}

type WasiHttpHttpTypesSchemeKind int

const (
WasiHttpHttpTypesSchemeKindHttp WasiHttpHttpTypesSchemeKind = iota
WasiHttpHttpTypesSchemeKindHttps
WasiHttpHttpTypesSchemeKindOther
)

type WasiHttpHttpTypesScheme struct {
  kind WasiHttpHttpTypesSchemeKind
  val any
}

func (n WasiHttpHttpTypesScheme) Kind() WasiHttpHttpTypesSchemeKind {
  return n.kind
}

func WasiHttpHttpTypesSchemeHttp() WasiHttpHttpTypesScheme{
  return WasiHttpHttpTypesScheme{kind: WasiHttpHttpTypesSchemeKindHttp}
}

func WasiHttpHttpTypesSchemeHttps() WasiHttpHttpTypesScheme{
  return WasiHttpHttpTypesScheme{kind: WasiHttpHttpTypesSchemeKindHttps}
}

func WasiHttpHttpTypesSchemeOther(v string) WasiHttpHttpTypesScheme{
  return WasiHttpHttpTypesScheme{kind: WasiHttpHttpTypesSchemeKindOther, val: v}
}

func (n WasiHttpHttpTypesScheme) GetOther() string{
  if g, w := n.Kind(), WasiHttpHttpTypesSchemeKindOther; g != w {
    panic(fmt.Sprintf("Attr kind is %v, not %v", g, w))
  }
  return n.val.(string)
}

func (n *WasiHttpHttpTypesScheme) SetOther(v string) {
  n.val = v
  n.kind = WasiHttpHttpTypesSchemeKindOther
}

type WasiHttpHttpTypesErrorKind int

const (
WasiHttpHttpTypesErrorKindInvalidUrl WasiHttpHttpTypesErrorKind = iota
WasiHttpHttpTypesErrorKindTimeoutError
WasiHttpHttpTypesErrorKindProtocolError
WasiHttpHttpTypesErrorKindUnexpectedError
)

type WasiHttpHttpTypesError struct {
  kind WasiHttpHttpTypesErrorKind
  val any
}

func (n WasiHttpHttpTypesError) Kind() WasiHttpHttpTypesErrorKind {
  return n.kind
}

func WasiHttpHttpTypesErrorInvalidUrl(v string) WasiHttpHttpTypesError{
  return WasiHttpHttpTypesError{kind: WasiHttpHttpTypesErrorKindInvalidUrl, val: v}
}

func (n WasiHttpHttpTypesError) GetInvalidUrl() string{
  if g, w := n.Kind(), WasiHttpHttpTypesErrorKindInvalidUrl; g != w {
    panic(fmt.Sprintf("Attr kind is %v, not %v", g, w))
  }
  return n.val.(string)
}

func (n *WasiHttpHttpTypesError) SetInvalidUrl(v string) {
  n.val = v
  n.kind = WasiHttpHttpTypesErrorKindInvalidUrl
}

func WasiHttpHttpTypesErrorTimeoutError(v string) WasiHttpHttpTypesError{
  return WasiHttpHttpTypesError{kind: WasiHttpHttpTypesErrorKindTimeoutError, val: v}
}

func (n WasiHttpHttpTypesError) GetTimeoutError() string{
  if g, w := n.Kind(), WasiHttpHttpTypesErrorKindTimeoutError; g != w {
    panic(fmt.Sprintf("Attr kind is %v, not %v", g, w))
  }
  return n.val.(string)
}

func (n *WasiHttpHttpTypesError) SetTimeoutError(v string) {
  n.val = v
  n.kind = WasiHttpHttpTypesErrorKindTimeoutError
}

func WasiHttpHttpTypesErrorProtocolError(v string) WasiHttpHttpTypesError{
  return WasiHttpHttpTypesError{kind: WasiHttpHttpTypesErrorKindProtocolError, val: v}
}

func (n WasiHttpHttpTypesError) GetProtocolError() string{
  if g, w := n.Kind(), WasiHttpHttpTypesErrorKindProtocolError; g != w {
    panic(fmt.Sprintf("Attr kind is %v, not %v", g, w))
  }
  return n.val.(string)
}

func (n *WasiHttpHttpTypesError) SetProtocolError(v string) {
  n.val = v
  n.kind = WasiHttpHttpTypesErrorKindProtocolError
}

func WasiHttpHttpTypesErrorUnexpectedError(v string) WasiHttpHttpTypesError{
  return WasiHttpHttpTypesError{kind: WasiHttpHttpTypesErrorKindUnexpectedError, val: v}
}

func (n WasiHttpHttpTypesError) GetUnexpectedError() string{
  if g, w := n.Kind(), WasiHttpHttpTypesErrorKindUnexpectedError; g != w {
    panic(fmt.Sprintf("Attr kind is %v, not %v", g, w))
  }
  return n.val.(string)
}

func (n *WasiHttpHttpTypesError) SetUnexpectedError(v string) {
  n.val = v
  n.kind = WasiHttpHttpTypesErrorKindUnexpectedError
}

type WasiHttpHttpTypesFields = uint32
type WasiHttpHttpTypesHeaders = uint32
type WasiHttpHttpTypesTrailers = uint32
type WasiHttpHttpTypesIncomingStream = uint32
type WasiHttpHttpTypesOutgoingStream = uint32
type WasiHttpHttpTypesFutureTrailers = uint32
type WasiHttpHttpTypesFutureWriteTrailersResult = uint32
type WasiHttpHttpTypesIncomingRequest = uint32
type WasiHttpHttpTypesOutgoingRequest = uint32
type WasiHttpHttpTypesRequestOptions struct {
  ConnectTimeoutMs Option[uint32]
  FirstByteTimeoutMs Option[uint32]
  BetweenBytesTimeoutMs Option[uint32]
}

type WasiHttpHttpTypesResponseOutparam = uint32
type WasiHttpHttpTypesStatusCode = uint16
type WasiHttpHttpTypesIncomingResponse = uint32
type WasiHttpHttpTypesOutgoingResponse = uint32
type WasiHttpHttpTypesFutureIncomingResponse = uint32
type WasiHttpHttpTypesTuple2StringListU8TT struct {
  F0 string
  F1 []uint8
}

type WasiHttpIncomingHandlerIncomingRequest = uint32
type WasiHttpIncomingHandlerResponseOutparam = uint32
type WasiKeyvalueWasiCloudErrorError = uint32
type WasiKeyvalueTypesInputStream = uint32
type WasiKeyvalueTypesOutputStream = uint32
type WasiKeyvalueTypesError = uint32
type WasiKeyvalueTypesBucket = uint32
type WasiKeyvalueTypesKey = string
type WasiKeyvalueTypesKeys = string
type WasiKeyvalueTypesOutgoingValue = uint32
type WasiKeyvalueTypesIncomingValue = uint32
type WasiKeyvalueTypesIncomingValueAsyncBody = uint32
type WasiKeyvalueTypesIncomingValueSyncBody = uint8
type WasiKeyvalueAtomicBucket = uint32
type WasiKeyvalueAtomicError = uint32
type WasiKeyvalueAtomicKey = string
type WasiKeyvalueBatchBucket = uint32
type WasiKeyvalueBatchError = uint32
type WasiKeyvalueBatchKey = string
type WasiKeyvalueBatchKeys = []string
type WasiKeyvalueBatchIncomingValue = uint32
type WasiKeyvalueBatchOutgoingValue = uint32
type WasiKeyvalueBatchTuple2WasiKeyvalueBatchKeyWasiKeyvalueBatchOutgoingValueT struct {
  F0 string
  F1 uint32
}

type WasiKeyvalueReadwriteBucket = uint32
type WasiKeyvalueReadwriteError = uint32
type WasiKeyvalueReadwriteIncomingValue = uint32
type WasiKeyvalueReadwriteKey = string
type WasiKeyvalueReadwriteOutgoingValue = uint32
// Import functions from wasi:poll/poll
func WasiPollPollDropPollable(this uint32) {
  var lower_this C.uint32_t
  lower_this_val := C.uint32_t(this)
  lower_this = lower_this_val
  C.wasi_poll_poll_drop_pollable(lower_this)
}

func WasiPollPollPollOneoff(in []uint32) []bool {
  var lower_in C.hello_cosmo_list_wasi_poll_poll_pollable_t
  if len(in) == 0 {
    lower_in.ptr = nil
    lower_in.len = 0
  } else {
    var empty_lower_in C.wasi_poll_poll_pollable_t
    lower_in.ptr = (*C.wasi_poll_poll_pollable_t)(C.malloc(C.size_t(len(in)) * C.size_t(unsafe.Sizeof(empty_lower_in))))
    lower_in.len = C.size_t(len(in))
    for lower_in_i := range in {
      lower_in_ptr := (*C.wasi_poll_poll_pollable_t)(unsafe.Pointer(uintptr(unsafe.Pointer(lower_in.ptr)) +
      uintptr(lower_in_i)*unsafe.Sizeof(empty_lower_in)))
      var lower_in_ptr_value C.uint32_t
      lower_in_ptr_value_val := C.uint32_t(in[lower_in_i])
      lower_in_ptr_value = lower_in_ptr_value_val
      *lower_in_ptr = lower_in_ptr_value
    }
  }
  defer C.hello_cosmo_list_wasi_poll_poll_pollable_free(&lower_in)
  var ret C.hello_cosmo_list_bool_t
  C.wasi_poll_poll_poll_oneoff(&lower_in, &ret)
  var lift_ret []bool
  lift_ret = make([]bool, ret.len)
  if ret.len > 0 {
    for lift_ret_i := 0; lift_ret_i < int(ret.len); lift_ret_i++ {
      var empty_lift_ret bool
      lift_ret_ptr := *(*bool)(unsafe.Pointer(uintptr(unsafe.Pointer(ret.ptr)) +
      uintptr(lift_ret_i)*unsafe.Sizeof(empty_lift_ret)))
      list_lift_ret := lift_ret_ptr
      lift_ret[lift_ret_i] = list_lift_ret
    }
  }
  return lift_ret
}

// Import functions from wasi:io/streams
func WasiIoStreamsRead(this uint32, len uint64) Result[WasiIoStreamsTuple2ListU8TWasiIoStreamsStreamStatusT, WasiIoStreamsStreamError] {
  var lower_this C.uint32_t
  lower_this_val := C.uint32_t(this)
  lower_this = lower_this_val
  lower_len := C.uint64_t(len)
  var ret C.hello_cosmo_result_tuple2_list_u8_wasi_io_streams_stream_status_wasi_io_streams_stream_error_t
  C.wasi_io_streams_read(lower_this, lower_len, &ret)
  var lift_ret Result[WasiIoStreamsTuple2ListU8TWasiIoStreamsStreamStatusT, WasiIoStreamsStreamError]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_io_streams_stream_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiIoStreamsStreamError
    var lift_ret_val_Dummy uint32
    lift_ret_val_Dummy = uint32(lift_ret_ptr.dummy)
    lift_ret_val.Dummy = lift_ret_val_Dummy
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.hello_cosmo_tuple2_list_u8_wasi_io_streams_stream_status_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiIoStreamsTuple2ListU8TWasiIoStreamsStreamStatusT
    var lift_ret_val_F0 []uint8
    lift_ret_val_F0 = make([]uint8, lift_ret_ptr.f0.len)
    if lift_ret_ptr.f0.len > 0 {
      for lift_ret_val_F0_i := 0; lift_ret_val_F0_i < int(lift_ret_ptr.f0.len); lift_ret_val_F0_i++ {
        var empty_lift_ret_val_F0 C.uint8_t
        lift_ret_val_F0_ptr := *(*C.uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(lift_ret_ptr.f0.ptr)) +
        uintptr(lift_ret_val_F0_i)*unsafe.Sizeof(empty_lift_ret_val_F0)))
        var list_lift_ret_val_F0 uint8
        list_lift_ret_val_F0 = uint8(lift_ret_val_F0_ptr)
        lift_ret_val_F0[lift_ret_val_F0_i] = list_lift_ret_val_F0
      }
    }
    lift_ret_val.F0 = lift_ret_val_F0
    var lift_ret_val_F1 WasiIoStreamsStreamStatus
    if lift_ret_ptr.f1 == 0 {
      lift_ret_val_F1 = WasiIoStreamsStreamStatusOpen()
    }
    if lift_ret_ptr.f1 == 1 {
      lift_ret_val_F1 = WasiIoStreamsStreamStatusEnded()
    }
    lift_ret_val.F1 = lift_ret_val_F1
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func WasiIoStreamsBlockingRead(this uint32, len uint64) Result[WasiIoStreamsTuple2ListU8TWasiIoStreamsStreamStatusT, WasiIoStreamsStreamError] {
  var lower_this C.uint32_t
  lower_this_val := C.uint32_t(this)
  lower_this = lower_this_val
  lower_len := C.uint64_t(len)
  var ret C.hello_cosmo_result_tuple2_list_u8_wasi_io_streams_stream_status_wasi_io_streams_stream_error_t
  C.wasi_io_streams_blocking_read(lower_this, lower_len, &ret)
  var lift_ret Result[WasiIoStreamsTuple2ListU8TWasiIoStreamsStreamStatusT, WasiIoStreamsStreamError]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_io_streams_stream_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiIoStreamsStreamError
    var lift_ret_val_Dummy uint32
    lift_ret_val_Dummy = uint32(lift_ret_ptr.dummy)
    lift_ret_val.Dummy = lift_ret_val_Dummy
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.hello_cosmo_tuple2_list_u8_wasi_io_streams_stream_status_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiIoStreamsTuple2ListU8TWasiIoStreamsStreamStatusT
    var lift_ret_val_F0 []uint8
    lift_ret_val_F0 = make([]uint8, lift_ret_ptr.f0.len)
    if lift_ret_ptr.f0.len > 0 {
      for lift_ret_val_F0_i := 0; lift_ret_val_F0_i < int(lift_ret_ptr.f0.len); lift_ret_val_F0_i++ {
        var empty_lift_ret_val_F0 C.uint8_t
        lift_ret_val_F0_ptr := *(*C.uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(lift_ret_ptr.f0.ptr)) +
        uintptr(lift_ret_val_F0_i)*unsafe.Sizeof(empty_lift_ret_val_F0)))
        var list_lift_ret_val_F0 uint8
        list_lift_ret_val_F0 = uint8(lift_ret_val_F0_ptr)
        lift_ret_val_F0[lift_ret_val_F0_i] = list_lift_ret_val_F0
      }
    }
    lift_ret_val.F0 = lift_ret_val_F0
    var lift_ret_val_F1 WasiIoStreamsStreamStatus
    if lift_ret_ptr.f1 == 0 {
      lift_ret_val_F1 = WasiIoStreamsStreamStatusOpen()
    }
    if lift_ret_ptr.f1 == 1 {
      lift_ret_val_F1 = WasiIoStreamsStreamStatusEnded()
    }
    lift_ret_val.F1 = lift_ret_val_F1
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func WasiIoStreamsSkip(this uint32, len uint64) Result[WasiIoStreamsTuple2U64WasiIoStreamsStreamStatusT, WasiIoStreamsStreamError] {
  var lower_this C.uint32_t
  lower_this_val := C.uint32_t(this)
  lower_this = lower_this_val
  lower_len := C.uint64_t(len)
  var ret C.hello_cosmo_result_tuple2_u64_wasi_io_streams_stream_status_wasi_io_streams_stream_error_t
  C.wasi_io_streams_skip(lower_this, lower_len, &ret)
  var lift_ret Result[WasiIoStreamsTuple2U64WasiIoStreamsStreamStatusT, WasiIoStreamsStreamError]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_io_streams_stream_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiIoStreamsStreamError
    var lift_ret_val_Dummy uint32
    lift_ret_val_Dummy = uint32(lift_ret_ptr.dummy)
    lift_ret_val.Dummy = lift_ret_val_Dummy
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.hello_cosmo_tuple2_u64_wasi_io_streams_stream_status_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiIoStreamsTuple2U64WasiIoStreamsStreamStatusT
    var lift_ret_val_F0 uint64
    lift_ret_val_F0 = uint64(lift_ret_ptr.f0)
    lift_ret_val.F0 = lift_ret_val_F0
    var lift_ret_val_F1 WasiIoStreamsStreamStatus
    if lift_ret_ptr.f1 == 0 {
      lift_ret_val_F1 = WasiIoStreamsStreamStatusOpen()
    }
    if lift_ret_ptr.f1 == 1 {
      lift_ret_val_F1 = WasiIoStreamsStreamStatusEnded()
    }
    lift_ret_val.F1 = lift_ret_val_F1
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func WasiIoStreamsBlockingSkip(this uint32, len uint64) Result[WasiIoStreamsTuple2U64WasiIoStreamsStreamStatusT, WasiIoStreamsStreamError] {
  var lower_this C.uint32_t
  lower_this_val := C.uint32_t(this)
  lower_this = lower_this_val
  lower_len := C.uint64_t(len)
  var ret C.hello_cosmo_result_tuple2_u64_wasi_io_streams_stream_status_wasi_io_streams_stream_error_t
  C.wasi_io_streams_blocking_skip(lower_this, lower_len, &ret)
  var lift_ret Result[WasiIoStreamsTuple2U64WasiIoStreamsStreamStatusT, WasiIoStreamsStreamError]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_io_streams_stream_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiIoStreamsStreamError
    var lift_ret_val_Dummy uint32
    lift_ret_val_Dummy = uint32(lift_ret_ptr.dummy)
    lift_ret_val.Dummy = lift_ret_val_Dummy
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.hello_cosmo_tuple2_u64_wasi_io_streams_stream_status_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiIoStreamsTuple2U64WasiIoStreamsStreamStatusT
    var lift_ret_val_F0 uint64
    lift_ret_val_F0 = uint64(lift_ret_ptr.f0)
    lift_ret_val.F0 = lift_ret_val_F0
    var lift_ret_val_F1 WasiIoStreamsStreamStatus
    if lift_ret_ptr.f1 == 0 {
      lift_ret_val_F1 = WasiIoStreamsStreamStatusOpen()
    }
    if lift_ret_ptr.f1 == 1 {
      lift_ret_val_F1 = WasiIoStreamsStreamStatusEnded()
    }
    lift_ret_val.F1 = lift_ret_val_F1
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func WasiIoStreamsSubscribeToInputStream(this uint32) uint32 {
  var lower_this C.uint32_t
  lower_this_val := C.uint32_t(this)
  lower_this = lower_this_val
  ret := C.wasi_io_streams_subscribe_to_input_stream(lower_this)
  var lift_ret uint32
  var lift_ret_val uint32
  var lift_ret_val_val uint32
  lift_ret_val_val = uint32(ret)
  lift_ret_val = lift_ret_val_val
  lift_ret = lift_ret_val
  return lift_ret
}

func WasiIoStreamsDropInputStream(this uint32) {
  var lower_this C.uint32_t
  lower_this_val := C.uint32_t(this)
  lower_this = lower_this_val
  C.wasi_io_streams_drop_input_stream(lower_this)
}

func WasiIoStreamsWrite(this uint32, buf []uint8) Result[WasiIoStreamsTuple2U64WasiIoStreamsStreamStatusT, WasiIoStreamsStreamError] {
  var lower_this C.uint32_t
  lower_this_val := C.uint32_t(this)
  lower_this = lower_this_val
  var lower_buf C.hello_cosmo_list_u8_t
  if len(buf) == 0 {
    lower_buf.ptr = nil
    lower_buf.len = 0
  } else {
    var empty_lower_buf C.uint8_t
    lower_buf.ptr = (*C.uint8_t)(C.malloc(C.size_t(len(buf)) * C.size_t(unsafe.Sizeof(empty_lower_buf))))
    lower_buf.len = C.size_t(len(buf))
    for lower_buf_i := range buf {
      lower_buf_ptr := (*C.uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(lower_buf.ptr)) +
      uintptr(lower_buf_i)*unsafe.Sizeof(empty_lower_buf)))
      lower_buf_ptr_value := C.uint8_t(buf[lower_buf_i])
      *lower_buf_ptr = lower_buf_ptr_value
    }
  }
  defer C.hello_cosmo_list_u8_free(&lower_buf)
  var ret C.hello_cosmo_result_tuple2_u64_wasi_io_streams_stream_status_wasi_io_streams_stream_error_t
  C.wasi_io_streams_write(lower_this, &lower_buf, &ret)
  var lift_ret Result[WasiIoStreamsTuple2U64WasiIoStreamsStreamStatusT, WasiIoStreamsStreamError]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_io_streams_stream_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiIoStreamsStreamError
    var lift_ret_val_Dummy uint32
    lift_ret_val_Dummy = uint32(lift_ret_ptr.dummy)
    lift_ret_val.Dummy = lift_ret_val_Dummy
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.hello_cosmo_tuple2_u64_wasi_io_streams_stream_status_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiIoStreamsTuple2U64WasiIoStreamsStreamStatusT
    var lift_ret_val_F0 uint64
    lift_ret_val_F0 = uint64(lift_ret_ptr.f0)
    lift_ret_val.F0 = lift_ret_val_F0
    var lift_ret_val_F1 WasiIoStreamsStreamStatus
    if lift_ret_ptr.f1 == 0 {
      lift_ret_val_F1 = WasiIoStreamsStreamStatusOpen()
    }
    if lift_ret_ptr.f1 == 1 {
      lift_ret_val_F1 = WasiIoStreamsStreamStatusEnded()
    }
    lift_ret_val.F1 = lift_ret_val_F1
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func WasiIoStreamsBlockingWrite(this uint32, buf []uint8) Result[WasiIoStreamsTuple2U64WasiIoStreamsStreamStatusT, WasiIoStreamsStreamError] {
  var lower_this C.uint32_t
  lower_this_val := C.uint32_t(this)
  lower_this = lower_this_val
  var lower_buf C.hello_cosmo_list_u8_t
  if len(buf) == 0 {
    lower_buf.ptr = nil
    lower_buf.len = 0
  } else {
    var empty_lower_buf C.uint8_t
    lower_buf.ptr = (*C.uint8_t)(C.malloc(C.size_t(len(buf)) * C.size_t(unsafe.Sizeof(empty_lower_buf))))
    lower_buf.len = C.size_t(len(buf))
    for lower_buf_i := range buf {
      lower_buf_ptr := (*C.uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(lower_buf.ptr)) +
      uintptr(lower_buf_i)*unsafe.Sizeof(empty_lower_buf)))
      lower_buf_ptr_value := C.uint8_t(buf[lower_buf_i])
      *lower_buf_ptr = lower_buf_ptr_value
    }
  }
  defer C.hello_cosmo_list_u8_free(&lower_buf)
  var ret C.hello_cosmo_result_tuple2_u64_wasi_io_streams_stream_status_wasi_io_streams_stream_error_t
  C.wasi_io_streams_blocking_write(lower_this, &lower_buf, &ret)
  var lift_ret Result[WasiIoStreamsTuple2U64WasiIoStreamsStreamStatusT, WasiIoStreamsStreamError]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_io_streams_stream_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiIoStreamsStreamError
    var lift_ret_val_Dummy uint32
    lift_ret_val_Dummy = uint32(lift_ret_ptr.dummy)
    lift_ret_val.Dummy = lift_ret_val_Dummy
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.hello_cosmo_tuple2_u64_wasi_io_streams_stream_status_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiIoStreamsTuple2U64WasiIoStreamsStreamStatusT
    var lift_ret_val_F0 uint64
    lift_ret_val_F0 = uint64(lift_ret_ptr.f0)
    lift_ret_val.F0 = lift_ret_val_F0
    var lift_ret_val_F1 WasiIoStreamsStreamStatus
    if lift_ret_ptr.f1 == 0 {
      lift_ret_val_F1 = WasiIoStreamsStreamStatusOpen()
    }
    if lift_ret_ptr.f1 == 1 {
      lift_ret_val_F1 = WasiIoStreamsStreamStatusEnded()
    }
    lift_ret_val.F1 = lift_ret_val_F1
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func WasiIoStreamsWriteZeroes(this uint32, len uint64) Result[WasiIoStreamsTuple2U64WasiIoStreamsStreamStatusT, WasiIoStreamsStreamError] {
  var lower_this C.uint32_t
  lower_this_val := C.uint32_t(this)
  lower_this = lower_this_val
  lower_len := C.uint64_t(len)
  var ret C.hello_cosmo_result_tuple2_u64_wasi_io_streams_stream_status_wasi_io_streams_stream_error_t
  C.wasi_io_streams_write_zeroes(lower_this, lower_len, &ret)
  var lift_ret Result[WasiIoStreamsTuple2U64WasiIoStreamsStreamStatusT, WasiIoStreamsStreamError]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_io_streams_stream_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiIoStreamsStreamError
    var lift_ret_val_Dummy uint32
    lift_ret_val_Dummy = uint32(lift_ret_ptr.dummy)
    lift_ret_val.Dummy = lift_ret_val_Dummy
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.hello_cosmo_tuple2_u64_wasi_io_streams_stream_status_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiIoStreamsTuple2U64WasiIoStreamsStreamStatusT
    var lift_ret_val_F0 uint64
    lift_ret_val_F0 = uint64(lift_ret_ptr.f0)
    lift_ret_val.F0 = lift_ret_val_F0
    var lift_ret_val_F1 WasiIoStreamsStreamStatus
    if lift_ret_ptr.f1 == 0 {
      lift_ret_val_F1 = WasiIoStreamsStreamStatusOpen()
    }
    if lift_ret_ptr.f1 == 1 {
      lift_ret_val_F1 = WasiIoStreamsStreamStatusEnded()
    }
    lift_ret_val.F1 = lift_ret_val_F1
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func WasiIoStreamsBlockingWriteZeroes(this uint32, len uint64) Result[WasiIoStreamsTuple2U64WasiIoStreamsStreamStatusT, WasiIoStreamsStreamError] {
  var lower_this C.uint32_t
  lower_this_val := C.uint32_t(this)
  lower_this = lower_this_val
  lower_len := C.uint64_t(len)
  var ret C.hello_cosmo_result_tuple2_u64_wasi_io_streams_stream_status_wasi_io_streams_stream_error_t
  C.wasi_io_streams_blocking_write_zeroes(lower_this, lower_len, &ret)
  var lift_ret Result[WasiIoStreamsTuple2U64WasiIoStreamsStreamStatusT, WasiIoStreamsStreamError]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_io_streams_stream_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiIoStreamsStreamError
    var lift_ret_val_Dummy uint32
    lift_ret_val_Dummy = uint32(lift_ret_ptr.dummy)
    lift_ret_val.Dummy = lift_ret_val_Dummy
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.hello_cosmo_tuple2_u64_wasi_io_streams_stream_status_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiIoStreamsTuple2U64WasiIoStreamsStreamStatusT
    var lift_ret_val_F0 uint64
    lift_ret_val_F0 = uint64(lift_ret_ptr.f0)
    lift_ret_val.F0 = lift_ret_val_F0
    var lift_ret_val_F1 WasiIoStreamsStreamStatus
    if lift_ret_ptr.f1 == 0 {
      lift_ret_val_F1 = WasiIoStreamsStreamStatusOpen()
    }
    if lift_ret_ptr.f1 == 1 {
      lift_ret_val_F1 = WasiIoStreamsStreamStatusEnded()
    }
    lift_ret_val.F1 = lift_ret_val_F1
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func WasiIoStreamsSplice(this uint32, src uint32, len uint64) Result[WasiIoStreamsTuple2U64WasiIoStreamsStreamStatusT, WasiIoStreamsStreamError] {
  var lower_this C.uint32_t
  lower_this_val := C.uint32_t(this)
  lower_this = lower_this_val
  var lower_src C.uint32_t
  lower_src_val := C.uint32_t(src)
  lower_src = lower_src_val
  lower_len := C.uint64_t(len)
  var ret C.hello_cosmo_result_tuple2_u64_wasi_io_streams_stream_status_wasi_io_streams_stream_error_t
  C.wasi_io_streams_splice(lower_this, lower_src, lower_len, &ret)
  var lift_ret Result[WasiIoStreamsTuple2U64WasiIoStreamsStreamStatusT, WasiIoStreamsStreamError]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_io_streams_stream_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiIoStreamsStreamError
    var lift_ret_val_Dummy uint32
    lift_ret_val_Dummy = uint32(lift_ret_ptr.dummy)
    lift_ret_val.Dummy = lift_ret_val_Dummy
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.hello_cosmo_tuple2_u64_wasi_io_streams_stream_status_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiIoStreamsTuple2U64WasiIoStreamsStreamStatusT
    var lift_ret_val_F0 uint64
    lift_ret_val_F0 = uint64(lift_ret_ptr.f0)
    lift_ret_val.F0 = lift_ret_val_F0
    var lift_ret_val_F1 WasiIoStreamsStreamStatus
    if lift_ret_ptr.f1 == 0 {
      lift_ret_val_F1 = WasiIoStreamsStreamStatusOpen()
    }
    if lift_ret_ptr.f1 == 1 {
      lift_ret_val_F1 = WasiIoStreamsStreamStatusEnded()
    }
    lift_ret_val.F1 = lift_ret_val_F1
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func WasiIoStreamsBlockingSplice(this uint32, src uint32, len uint64) Result[WasiIoStreamsTuple2U64WasiIoStreamsStreamStatusT, WasiIoStreamsStreamError] {
  var lower_this C.uint32_t
  lower_this_val := C.uint32_t(this)
  lower_this = lower_this_val
  var lower_src C.uint32_t
  lower_src_val := C.uint32_t(src)
  lower_src = lower_src_val
  lower_len := C.uint64_t(len)
  var ret C.hello_cosmo_result_tuple2_u64_wasi_io_streams_stream_status_wasi_io_streams_stream_error_t
  C.wasi_io_streams_blocking_splice(lower_this, lower_src, lower_len, &ret)
  var lift_ret Result[WasiIoStreamsTuple2U64WasiIoStreamsStreamStatusT, WasiIoStreamsStreamError]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_io_streams_stream_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiIoStreamsStreamError
    var lift_ret_val_Dummy uint32
    lift_ret_val_Dummy = uint32(lift_ret_ptr.dummy)
    lift_ret_val.Dummy = lift_ret_val_Dummy
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.hello_cosmo_tuple2_u64_wasi_io_streams_stream_status_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiIoStreamsTuple2U64WasiIoStreamsStreamStatusT
    var lift_ret_val_F0 uint64
    lift_ret_val_F0 = uint64(lift_ret_ptr.f0)
    lift_ret_val.F0 = lift_ret_val_F0
    var lift_ret_val_F1 WasiIoStreamsStreamStatus
    if lift_ret_ptr.f1 == 0 {
      lift_ret_val_F1 = WasiIoStreamsStreamStatusOpen()
    }
    if lift_ret_ptr.f1 == 1 {
      lift_ret_val_F1 = WasiIoStreamsStreamStatusEnded()
    }
    lift_ret_val.F1 = lift_ret_val_F1
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func WasiIoStreamsForward(this uint32, src uint32) Result[WasiIoStreamsTuple2U64WasiIoStreamsStreamStatusT, WasiIoStreamsStreamError] {
  var lower_this C.uint32_t
  lower_this_val := C.uint32_t(this)
  lower_this = lower_this_val
  var lower_src C.uint32_t
  lower_src_val := C.uint32_t(src)
  lower_src = lower_src_val
  var ret C.hello_cosmo_result_tuple2_u64_wasi_io_streams_stream_status_wasi_io_streams_stream_error_t
  C.wasi_io_streams_forward(lower_this, lower_src, &ret)
  var lift_ret Result[WasiIoStreamsTuple2U64WasiIoStreamsStreamStatusT, WasiIoStreamsStreamError]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_io_streams_stream_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiIoStreamsStreamError
    var lift_ret_val_Dummy uint32
    lift_ret_val_Dummy = uint32(lift_ret_ptr.dummy)
    lift_ret_val.Dummy = lift_ret_val_Dummy
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.hello_cosmo_tuple2_u64_wasi_io_streams_stream_status_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiIoStreamsTuple2U64WasiIoStreamsStreamStatusT
    var lift_ret_val_F0 uint64
    lift_ret_val_F0 = uint64(lift_ret_ptr.f0)
    lift_ret_val.F0 = lift_ret_val_F0
    var lift_ret_val_F1 WasiIoStreamsStreamStatus
    if lift_ret_ptr.f1 == 0 {
      lift_ret_val_F1 = WasiIoStreamsStreamStatusOpen()
    }
    if lift_ret_ptr.f1 == 1 {
      lift_ret_val_F1 = WasiIoStreamsStreamStatusEnded()
    }
    lift_ret_val.F1 = lift_ret_val_F1
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func WasiIoStreamsSubscribeToOutputStream(this uint32) uint32 {
  var lower_this C.uint32_t
  lower_this_val := C.uint32_t(this)
  lower_this = lower_this_val
  ret := C.wasi_io_streams_subscribe_to_output_stream(lower_this)
  var lift_ret uint32
  var lift_ret_val uint32
  var lift_ret_val_val uint32
  lift_ret_val_val = uint32(ret)
  lift_ret_val = lift_ret_val_val
  lift_ret = lift_ret_val
  return lift_ret
}

func WasiIoStreamsDropOutputStream(this uint32) {
  var lower_this C.uint32_t
  lower_this_val := C.uint32_t(this)
  lower_this = lower_this_val
  C.wasi_io_streams_drop_output_stream(lower_this)
}

// Import functions from wasi:keyvalue/wasi-cloud-error
func WasiKeyvalueWasiCloudErrorDropError(error uint32) {
  var lower_error C.uint32_t
  lower_error_val := C.uint32_t(error)
  lower_error = lower_error_val
  C.wasi_keyvalue_wasi_cloud_error_drop_error(lower_error)
}

func WasiKeyvalueWasiCloudErrorTrace(error uint32) string {
  var lower_error C.uint32_t
  lower_error_val := C.uint32_t(error)
  lower_error = lower_error_val
  var ret C.hello_cosmo_string_t
  C.wasi_keyvalue_wasi_cloud_error_trace(lower_error, &ret)
  var lift_ret string
  lift_ret = C.GoStringN(ret.ptr, C.int(ret.len))
  return lift_ret
}

// Import functions from wasi:keyvalue/types
func WasiKeyvalueTypesDropBucket(bucket uint32) {
  var lower_bucket C.uint32_t
  lower_bucket_val := C.uint32_t(bucket)
  lower_bucket = lower_bucket_val
  C.wasi_keyvalue_types_drop_bucket(lower_bucket)
}

func WasiKeyvalueTypesOpenBucket(name string) Result[uint32, uint32] {
  var lower_name C.hello_cosmo_string_t
  
  lower_name.ptr = C.CString(name)
  lower_name.len = C.size_t(len(name))
  defer C.hello_cosmo_string_free(&lower_name)
  var ret C.hello_cosmo_result_wasi_keyvalue_types_bucket_wasi_keyvalue_types_error_t
  C.wasi_keyvalue_types_open_bucket(&lower_name, &ret)
  var lift_ret Result[uint32, uint32]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_keyvalue_types_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val uint32
    var lift_ret_val_val uint32
    var lift_ret_val_val_val uint32
    lift_ret_val_val_val = uint32(lift_ret_ptr)
    lift_ret_val_val = lift_ret_val_val_val
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.wasi_keyvalue_types_bucket_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val uint32
    var lift_ret_val_val uint32
    lift_ret_val_val = uint32(lift_ret_ptr)
    lift_ret_val = lift_ret_val_val
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func WasiKeyvalueTypesDropOutgoingValue(outgoing_value uint32) {
  var lower_outgoing_value C.uint32_t
  lower_outgoing_value_val := C.uint32_t(outgoing_value)
  lower_outgoing_value = lower_outgoing_value_val
  C.wasi_keyvalue_types_drop_outgoing_value(lower_outgoing_value)
}

func WasiKeyvalueTypesNewOutgoingValue() uint32 {
  ret := C.wasi_keyvalue_types_new_outgoing_value()
  var lift_ret uint32
  var lift_ret_val uint32
  lift_ret_val = uint32(ret)
  lift_ret = lift_ret_val
  return lift_ret
}

func WasiKeyvalueTypesOutgoingValueWriteBody(outgoing_value uint32) Result[uint32, struct{}] {
  var lower_outgoing_value C.uint32_t
  lower_outgoing_value_val := C.uint32_t(outgoing_value)
  lower_outgoing_value = lower_outgoing_value_val
  var ret C.hello_cosmo_result_wasi_keyvalue_types_output_stream_void_t
  C.wasi_keyvalue_types_outgoing_value_write_body(lower_outgoing_value, &ret)
  var lift_ret Result[uint32, struct{}]
  if ret.is_err {
    lift_ret.SetErr(struct{}{})
  } else {
    lift_ret_ptr := *(*C.wasi_keyvalue_types_output_stream_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val uint32
    var lift_ret_val_val uint32
    var lift_ret_val_val_val uint32
    lift_ret_val_val_val = uint32(lift_ret_ptr)
    lift_ret_val_val = lift_ret_val_val_val
    lift_ret_val = lift_ret_val_val
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func WasiKeyvalueTypesDropIncomingValue(incoming_value uint32) {
  var lower_incoming_value C.uint32_t
  lower_incoming_value_val := C.uint32_t(incoming_value)
  lower_incoming_value = lower_incoming_value_val
  C.wasi_keyvalue_types_drop_incoming_value(lower_incoming_value)
}

func WasiKeyvalueTypesIncomingValueConsumeSync(incoming_value uint32) Result[[]uint8, uint32] {
  var lower_incoming_value C.uint32_t
  lower_incoming_value_val := C.uint32_t(incoming_value)
  lower_incoming_value = lower_incoming_value_val
  var ret C.hello_cosmo_result_wasi_keyvalue_types_incoming_value_sync_body_wasi_keyvalue_types_error_t
  C.wasi_keyvalue_types_incoming_value_consume_sync(lower_incoming_value, &ret)
  var lift_ret Result[[]uint8, uint32]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_keyvalue_types_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val uint32
    var lift_ret_val_val uint32
    var lift_ret_val_val_val uint32
    lift_ret_val_val_val = uint32(lift_ret_ptr)
    lift_ret_val_val = lift_ret_val_val_val
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.wasi_keyvalue_types_incoming_value_sync_body_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val []uint8
    lift_ret_val = make([]uint8, lift_ret_ptr.len)
    if lift_ret_ptr.len > 0 {
      for lift_ret_val_i := 0; lift_ret_val_i < int(lift_ret_ptr.len); lift_ret_val_i++ {
        var empty_lift_ret_val C.uint8_t
        lift_ret_val_ptr := *(*C.uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(lift_ret_ptr.ptr)) +
        uintptr(lift_ret_val_i)*unsafe.Sizeof(empty_lift_ret_val)))
        var list_lift_ret_val uint8
        list_lift_ret_val = uint8(lift_ret_val_ptr)
        lift_ret_val[lift_ret_val_i] = list_lift_ret_val
      }
    }
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func WasiKeyvalueTypesIncomingValueConsumeAsync(incoming_value uint32) Result[uint32, uint32] {
  var lower_incoming_value C.uint32_t
  lower_incoming_value_val := C.uint32_t(incoming_value)
  lower_incoming_value = lower_incoming_value_val
  var ret C.hello_cosmo_result_wasi_keyvalue_types_incoming_value_async_body_wasi_keyvalue_types_error_t
  C.wasi_keyvalue_types_incoming_value_consume_async(lower_incoming_value, &ret)
  var lift_ret Result[uint32, uint32]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_keyvalue_types_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val uint32
    var lift_ret_val_val uint32
    var lift_ret_val_val_val uint32
    lift_ret_val_val_val = uint32(lift_ret_ptr)
    lift_ret_val_val = lift_ret_val_val_val
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.wasi_keyvalue_types_incoming_value_async_body_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val uint32
    var lift_ret_val_val uint32
    var lift_ret_val_val_val uint32
    var lift_ret_val_val_val_val uint32
    lift_ret_val_val_val_val = uint32(lift_ret_ptr)
    lift_ret_val_val_val = lift_ret_val_val_val_val
    lift_ret_val_val = lift_ret_val_val_val
    lift_ret_val = lift_ret_val_val
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func WasiKeyvalueTypesSize(incoming_value uint32) uint64 {
  var lower_incoming_value C.uint32_t
  lower_incoming_value_val := C.uint32_t(incoming_value)
  lower_incoming_value = lower_incoming_value_val
  ret := C.wasi_keyvalue_types_size(lower_incoming_value)
  var lift_ret uint64
  lift_ret = uint64(ret)
  return lift_ret
}

// Import functions from wasi:keyvalue/readwrite
func WasiKeyvalueReadwriteGet(bucket uint32, key string) Result[uint32, uint32] {
  var lower_bucket C.wasi_keyvalue_types_bucket_t
  var lower_bucket_val C.uint32_t
  lower_bucket_val_val := C.uint32_t(bucket)
  lower_bucket_val = lower_bucket_val_val
  lower_bucket = lower_bucket_val
  var lower_key C.wasi_keyvalue_types_key_t
  var lower_key_val C.hello_cosmo_string_t
  var lower_key_val_val C.hello_cosmo_string_t
  
  lower_key_val_val.ptr = C.CString(key)
  lower_key_val_val.len = C.size_t(len(key))
  lower_key_val = lower_key_val_val
  lower_key = lower_key_val
  defer C.wasi_keyvalue_readwrite_key_free(&lower_key)
  var ret C.hello_cosmo_result_wasi_keyvalue_readwrite_incoming_value_wasi_keyvalue_readwrite_error_t
  C.wasi_keyvalue_readwrite_get(lower_bucket, &lower_key, &ret)
  var lift_ret Result[uint32, uint32]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_keyvalue_readwrite_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val uint32
    var lift_ret_val_val uint32
    var lift_ret_val_val_val uint32
    var lift_ret_val_val_val_val uint32
    lift_ret_val_val_val_val = uint32(lift_ret_ptr)
    lift_ret_val_val_val = lift_ret_val_val_val_val
    lift_ret_val_val = lift_ret_val_val_val
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.wasi_keyvalue_readwrite_incoming_value_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val uint32
    var lift_ret_val_val uint32
    var lift_ret_val_val_val uint32
    lift_ret_val_val_val = uint32(lift_ret_ptr)
    lift_ret_val_val = lift_ret_val_val_val
    lift_ret_val = lift_ret_val_val
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func WasiKeyvalueReadwriteSet(bucket uint32, key string, outgoing_value uint32) Result[struct{}, uint32] {
  var lower_bucket C.wasi_keyvalue_types_bucket_t
  var lower_bucket_val C.uint32_t
  lower_bucket_val_val := C.uint32_t(bucket)
  lower_bucket_val = lower_bucket_val_val
  lower_bucket = lower_bucket_val
  var lower_key C.wasi_keyvalue_types_key_t
  var lower_key_val C.hello_cosmo_string_t
  var lower_key_val_val C.hello_cosmo_string_t
  
  lower_key_val_val.ptr = C.CString(key)
  lower_key_val_val.len = C.size_t(len(key))
  lower_key_val = lower_key_val_val
  lower_key = lower_key_val
  defer C.wasi_keyvalue_readwrite_key_free(&lower_key)
  var lower_outgoing_value C.wasi_keyvalue_types_outgoing_value_t
  var lower_outgoing_value_val C.uint32_t
  lower_outgoing_value_val_val := C.uint32_t(outgoing_value)
  lower_outgoing_value_val = lower_outgoing_value_val_val
  lower_outgoing_value = lower_outgoing_value_val
  var ret C.hello_cosmo_result_void_wasi_keyvalue_readwrite_error_t
  C.wasi_keyvalue_readwrite_set(lower_bucket, &lower_key, lower_outgoing_value, &ret)
  var lift_ret Result[struct{}, uint32]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_keyvalue_readwrite_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val uint32
    var lift_ret_val_val uint32
    var lift_ret_val_val_val uint32
    var lift_ret_val_val_val_val uint32
    lift_ret_val_val_val_val = uint32(lift_ret_ptr)
    lift_ret_val_val_val = lift_ret_val_val_val_val
    lift_ret_val_val = lift_ret_val_val_val
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func WasiKeyvalueReadwriteDelete(bucket uint32, key string) Result[struct{}, uint32] {
  var lower_bucket C.wasi_keyvalue_types_bucket_t
  var lower_bucket_val C.uint32_t
  lower_bucket_val_val := C.uint32_t(bucket)
  lower_bucket_val = lower_bucket_val_val
  lower_bucket = lower_bucket_val
  var lower_key C.wasi_keyvalue_types_key_t
  var lower_key_val C.hello_cosmo_string_t
  var lower_key_val_val C.hello_cosmo_string_t
  
  lower_key_val_val.ptr = C.CString(key)
  lower_key_val_val.len = C.size_t(len(key))
  lower_key_val = lower_key_val_val
  lower_key = lower_key_val
  defer C.wasi_keyvalue_readwrite_key_free(&lower_key)
  var ret C.hello_cosmo_result_void_wasi_keyvalue_readwrite_error_t
  C.wasi_keyvalue_readwrite_delete(lower_bucket, &lower_key, &ret)
  var lift_ret Result[struct{}, uint32]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_keyvalue_readwrite_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val uint32
    var lift_ret_val_val uint32
    var lift_ret_val_val_val uint32
    var lift_ret_val_val_val_val uint32
    lift_ret_val_val_val_val = uint32(lift_ret_ptr)
    lift_ret_val_val_val = lift_ret_val_val_val_val
    lift_ret_val_val = lift_ret_val_val_val
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func WasiKeyvalueReadwriteExists(bucket uint32, key string) Result[bool, uint32] {
  var lower_bucket C.wasi_keyvalue_types_bucket_t
  var lower_bucket_val C.uint32_t
  lower_bucket_val_val := C.uint32_t(bucket)
  lower_bucket_val = lower_bucket_val_val
  lower_bucket = lower_bucket_val
  var lower_key C.wasi_keyvalue_types_key_t
  var lower_key_val C.hello_cosmo_string_t
  var lower_key_val_val C.hello_cosmo_string_t
  
  lower_key_val_val.ptr = C.CString(key)
  lower_key_val_val.len = C.size_t(len(key))
  lower_key_val = lower_key_val_val
  lower_key = lower_key_val
  defer C.wasi_keyvalue_readwrite_key_free(&lower_key)
  var ret C.hello_cosmo_result_bool_wasi_keyvalue_readwrite_error_t
  C.wasi_keyvalue_readwrite_exists(lower_bucket, &lower_key, &ret)
  var lift_ret Result[bool, uint32]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_keyvalue_readwrite_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val uint32
    var lift_ret_val_val uint32
    var lift_ret_val_val_val uint32
    var lift_ret_val_val_val_val uint32
    lift_ret_val_val_val_val = uint32(lift_ret_ptr)
    lift_ret_val_val_val = lift_ret_val_val_val_val
    lift_ret_val_val = lift_ret_val_val_val
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*bool)(unsafe.Pointer(&ret.val))
    lift_ret_val := lift_ret_ptr
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

// Import functions from wasi:keyvalue/atomic
func WasiKeyvalueAtomicIncrement(bucket uint32, key string, delta uint64) Result[uint64, uint32] {
  var lower_bucket C.wasi_keyvalue_types_bucket_t
  var lower_bucket_val C.uint32_t
  lower_bucket_val_val := C.uint32_t(bucket)
  lower_bucket_val = lower_bucket_val_val
  lower_bucket = lower_bucket_val
  var lower_key C.wasi_keyvalue_types_key_t
  var lower_key_val C.hello_cosmo_string_t
  var lower_key_val_val C.hello_cosmo_string_t
  
  lower_key_val_val.ptr = C.CString(key)
  lower_key_val_val.len = C.size_t(len(key))
  lower_key_val = lower_key_val_val
  lower_key = lower_key_val
  defer C.wasi_keyvalue_atomic_key_free(&lower_key)
  lower_delta := C.uint64_t(delta)
  var ret C.hello_cosmo_result_u64_wasi_keyvalue_atomic_error_t
  C.wasi_keyvalue_atomic_increment(lower_bucket, &lower_key, lower_delta, &ret)
  var lift_ret Result[uint64, uint32]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_keyvalue_atomic_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val uint32
    var lift_ret_val_val uint32
    var lift_ret_val_val_val uint32
    var lift_ret_val_val_val_val uint32
    lift_ret_val_val_val_val = uint32(lift_ret_ptr)
    lift_ret_val_val_val = lift_ret_val_val_val_val
    lift_ret_val_val = lift_ret_val_val_val
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.uint64_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val uint64
    lift_ret_val = uint64(lift_ret_ptr)
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func WasiKeyvalueAtomicCompareAndSwap(bucket uint32, key string, old uint64, new uint64) Result[bool, uint32] {
  var lower_bucket C.wasi_keyvalue_types_bucket_t
  var lower_bucket_val C.uint32_t
  lower_bucket_val_val := C.uint32_t(bucket)
  lower_bucket_val = lower_bucket_val_val
  lower_bucket = lower_bucket_val
  var lower_key C.wasi_keyvalue_types_key_t
  var lower_key_val C.hello_cosmo_string_t
  var lower_key_val_val C.hello_cosmo_string_t
  
  lower_key_val_val.ptr = C.CString(key)
  lower_key_val_val.len = C.size_t(len(key))
  lower_key_val = lower_key_val_val
  lower_key = lower_key_val
  defer C.wasi_keyvalue_atomic_key_free(&lower_key)
  lower_old := C.uint64_t(old)
  lower_new := C.uint64_t(new)
  var ret C.hello_cosmo_result_bool_wasi_keyvalue_atomic_error_t
  C.wasi_keyvalue_atomic_compare_and_swap(lower_bucket, &lower_key, lower_old, lower_new, &ret)
  var lift_ret Result[bool, uint32]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_keyvalue_atomic_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val uint32
    var lift_ret_val_val uint32
    var lift_ret_val_val_val uint32
    var lift_ret_val_val_val_val uint32
    lift_ret_val_val_val_val = uint32(lift_ret_ptr)
    lift_ret_val_val_val = lift_ret_val_val_val_val
    lift_ret_val_val = lift_ret_val_val_val
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*bool)(unsafe.Pointer(&ret.val))
    lift_ret_val := lift_ret_ptr
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

// Import functions from wasi:keyvalue/batch
func WasiKeyvalueBatchGetMany(bucket uint32, keys []string) Result[[]uint32, uint32] {
  var lower_bucket C.wasi_keyvalue_types_bucket_t
  var lower_bucket_val C.uint32_t
  lower_bucket_val_val := C.uint32_t(bucket)
  lower_bucket_val = lower_bucket_val_val
  lower_bucket = lower_bucket_val
  var lower_keys C.wasi_keyvalue_types_keys_t
  var lower_keys_val C.wasi_keyvalue_types_keys_t
  if len(keys) == 0 {
    lower_keys_val.ptr = nil
    lower_keys_val.len = 0
  } else {
    var empty_lower_keys_val C.wasi_keyvalue_types_key_t
    lower_keys_val.ptr = (*C.wasi_keyvalue_types_key_t)(C.malloc(C.size_t(len(keys)) * C.size_t(unsafe.Sizeof(empty_lower_keys_val))))
    lower_keys_val.len = C.size_t(len(keys))
    for lower_keys_val_i := range keys {
      lower_keys_val_ptr := (*C.wasi_keyvalue_types_key_t)(unsafe.Pointer(uintptr(unsafe.Pointer(lower_keys_val.ptr)) +
      uintptr(lower_keys_val_i)*unsafe.Sizeof(empty_lower_keys_val)))
      var lower_keys_val_ptr_value C.hello_cosmo_string_t
      var lower_keys_val_ptr_value_val C.hello_cosmo_string_t
      
      lower_keys_val_ptr_value_val.ptr = C.CString(keys[lower_keys_val_i])
      lower_keys_val_ptr_value_val.len = C.size_t(len(keys[lower_keys_val_i]))
      lower_keys_val_ptr_value = lower_keys_val_ptr_value_val
      *lower_keys_val_ptr = lower_keys_val_ptr_value
    }
  }
  lower_keys = lower_keys_val
  defer C.wasi_keyvalue_batch_keys_free(&lower_keys)
  var ret C.hello_cosmo_result_list_wasi_keyvalue_batch_incoming_value_wasi_keyvalue_batch_error_t
  C.wasi_keyvalue_batch_get_many(lower_bucket, &lower_keys, &ret)
  var lift_ret Result[[]uint32, uint32]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_keyvalue_batch_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val uint32
    var lift_ret_val_val uint32
    var lift_ret_val_val_val uint32
    var lift_ret_val_val_val_val uint32
    lift_ret_val_val_val_val = uint32(lift_ret_ptr)
    lift_ret_val_val_val = lift_ret_val_val_val_val
    lift_ret_val_val = lift_ret_val_val_val
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.hello_cosmo_list_wasi_keyvalue_batch_incoming_value_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val []uint32
    lift_ret_val = make([]uint32, lift_ret_ptr.len)
    if lift_ret_ptr.len > 0 {
      for lift_ret_val_i := 0; lift_ret_val_i < int(lift_ret_ptr.len); lift_ret_val_i++ {
        var empty_lift_ret_val C.wasi_keyvalue_batch_incoming_value_t
        lift_ret_val_ptr := *(*C.wasi_keyvalue_batch_incoming_value_t)(unsafe.Pointer(uintptr(unsafe.Pointer(lift_ret_ptr.ptr)) +
        uintptr(lift_ret_val_i)*unsafe.Sizeof(empty_lift_ret_val)))
        var list_lift_ret_val uint32
        var list_lift_ret_val_val uint32
        var list_lift_ret_val_val_val uint32
        list_lift_ret_val_val_val = uint32(lift_ret_val_ptr)
        list_lift_ret_val_val = list_lift_ret_val_val_val
        list_lift_ret_val = list_lift_ret_val_val
        lift_ret_val[lift_ret_val_i] = list_lift_ret_val
      }
    }
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func WasiKeyvalueBatchGetKeys(bucket uint32) []string {
  var lower_bucket C.wasi_keyvalue_types_bucket_t
  var lower_bucket_val C.uint32_t
  lower_bucket_val_val := C.uint32_t(bucket)
  lower_bucket_val = lower_bucket_val_val
  lower_bucket = lower_bucket_val
  var ret C.wasi_keyvalue_batch_keys_t
  C.wasi_keyvalue_batch_get_keys(lower_bucket, &ret)
  var lift_ret []string
  var lift_ret_val []string
  lift_ret_val = make([]string, ret.len)
  if ret.len > 0 {
    for lift_ret_val_i := 0; lift_ret_val_i < int(ret.len); lift_ret_val_i++ {
      var empty_lift_ret_val C.wasi_keyvalue_types_key_t
      lift_ret_val_ptr := *(*C.wasi_keyvalue_types_key_t)(unsafe.Pointer(uintptr(unsafe.Pointer(ret.ptr)) +
      uintptr(lift_ret_val_i)*unsafe.Sizeof(empty_lift_ret_val)))
      var list_lift_ret_val string
      var list_lift_ret_val_val string
      list_lift_ret_val_val = C.GoStringN(lift_ret_val_ptr.ptr, C.int(lift_ret_val_ptr.len))
      list_lift_ret_val = list_lift_ret_val_val
      lift_ret_val[lift_ret_val_i] = list_lift_ret_val
    }
  }
  lift_ret = lift_ret_val
  return lift_ret
}

func WasiKeyvalueBatchSetMany(bucket uint32, keys []string, values []WasiKeyvalueBatchTuple2WasiKeyvalueBatchKeyWasiKeyvalueBatchOutgoingValueT) Result[struct{}, uint32] {
  var lower_bucket C.wasi_keyvalue_types_bucket_t
  var lower_bucket_val C.uint32_t
  lower_bucket_val_val := C.uint32_t(bucket)
  lower_bucket_val = lower_bucket_val_val
  lower_bucket = lower_bucket_val
  var lower_keys C.wasi_keyvalue_types_keys_t
  var lower_keys_val C.wasi_keyvalue_types_keys_t
  if len(keys) == 0 {
    lower_keys_val.ptr = nil
    lower_keys_val.len = 0
  } else {
    var empty_lower_keys_val C.wasi_keyvalue_types_key_t
    lower_keys_val.ptr = (*C.wasi_keyvalue_types_key_t)(C.malloc(C.size_t(len(keys)) * C.size_t(unsafe.Sizeof(empty_lower_keys_val))))
    lower_keys_val.len = C.size_t(len(keys))
    for lower_keys_val_i := range keys {
      lower_keys_val_ptr := (*C.wasi_keyvalue_types_key_t)(unsafe.Pointer(uintptr(unsafe.Pointer(lower_keys_val.ptr)) +
      uintptr(lower_keys_val_i)*unsafe.Sizeof(empty_lower_keys_val)))
      var lower_keys_val_ptr_value C.hello_cosmo_string_t
      var lower_keys_val_ptr_value_val C.hello_cosmo_string_t
      
      lower_keys_val_ptr_value_val.ptr = C.CString(keys[lower_keys_val_i])
      lower_keys_val_ptr_value_val.len = C.size_t(len(keys[lower_keys_val_i]))
      lower_keys_val_ptr_value = lower_keys_val_ptr_value_val
      *lower_keys_val_ptr = lower_keys_val_ptr_value
    }
  }
  lower_keys = lower_keys_val
  defer C.wasi_keyvalue_batch_keys_free(&lower_keys)
  var lower_values C.hello_cosmo_list_tuple2_wasi_keyvalue_batch_key_wasi_keyvalue_batch_outgoing_value_t
  if len(values) == 0 {
    lower_values.ptr = nil
    lower_values.len = 0
  } else {
    var empty_lower_values C.hello_cosmo_tuple2_wasi_keyvalue_batch_key_wasi_keyvalue_batch_outgoing_value_t
    lower_values.ptr = (*C.hello_cosmo_tuple2_wasi_keyvalue_batch_key_wasi_keyvalue_batch_outgoing_value_t)(C.malloc(C.size_t(len(values)) * C.size_t(unsafe.Sizeof(empty_lower_values))))
    lower_values.len = C.size_t(len(values))
    for lower_values_i := range values {
      lower_values_ptr := (*C.hello_cosmo_tuple2_wasi_keyvalue_batch_key_wasi_keyvalue_batch_outgoing_value_t)(unsafe.Pointer(uintptr(unsafe.Pointer(lower_values.ptr)) +
      uintptr(lower_values_i)*unsafe.Sizeof(empty_lower_values)))
      var lower_values_ptr_value C.hello_cosmo_tuple2_wasi_keyvalue_batch_key_wasi_keyvalue_batch_outgoing_value_t
      var lower_values_ptr_value_f0 C.wasi_keyvalue_types_key_t
      var lower_values_ptr_value_f0_val C.hello_cosmo_string_t
      var lower_values_ptr_value_f0_val_val C.hello_cosmo_string_t
      
      lower_values_ptr_value_f0_val_val.ptr = C.CString(values[lower_values_i].F0)
      lower_values_ptr_value_f0_val_val.len = C.size_t(len(values[lower_values_i].F0))
      lower_values_ptr_value_f0_val = lower_values_ptr_value_f0_val_val
      lower_values_ptr_value_f0 = lower_values_ptr_value_f0_val
      lower_values_ptr_value.f0 = lower_values_ptr_value_f0
      var lower_values_ptr_value_f1 C.wasi_keyvalue_types_outgoing_value_t
      var lower_values_ptr_value_f1_val C.uint32_t
      lower_values_ptr_value_f1_val_val := C.uint32_t(values[lower_values_i].F1)
      lower_values_ptr_value_f1_val = lower_values_ptr_value_f1_val_val
      lower_values_ptr_value_f1 = lower_values_ptr_value_f1_val
      lower_values_ptr_value.f1 = lower_values_ptr_value_f1
      *lower_values_ptr = lower_values_ptr_value
    }
  }
  defer C.hello_cosmo_list_tuple2_wasi_keyvalue_batch_key_wasi_keyvalue_batch_outgoing_value_free(&lower_values)
  var ret C.hello_cosmo_result_void_wasi_keyvalue_batch_error_t
  C.wasi_keyvalue_batch_set_many(lower_bucket, &lower_keys, &lower_values, &ret)
  var lift_ret Result[struct{}, uint32]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_keyvalue_batch_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val uint32
    var lift_ret_val_val uint32
    var lift_ret_val_val_val uint32
    var lift_ret_val_val_val_val uint32
    lift_ret_val_val_val_val = uint32(lift_ret_ptr)
    lift_ret_val_val_val = lift_ret_val_val_val_val
    lift_ret_val_val = lift_ret_val_val_val
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func WasiKeyvalueBatchDeleteMany(bucket uint32, keys []string) Result[struct{}, uint32] {
  var lower_bucket C.wasi_keyvalue_types_bucket_t
  var lower_bucket_val C.uint32_t
  lower_bucket_val_val := C.uint32_t(bucket)
  lower_bucket_val = lower_bucket_val_val
  lower_bucket = lower_bucket_val
  var lower_keys C.wasi_keyvalue_types_keys_t
  var lower_keys_val C.wasi_keyvalue_types_keys_t
  if len(keys) == 0 {
    lower_keys_val.ptr = nil
    lower_keys_val.len = 0
  } else {
    var empty_lower_keys_val C.wasi_keyvalue_types_key_t
    lower_keys_val.ptr = (*C.wasi_keyvalue_types_key_t)(C.malloc(C.size_t(len(keys)) * C.size_t(unsafe.Sizeof(empty_lower_keys_val))))
    lower_keys_val.len = C.size_t(len(keys))
    for lower_keys_val_i := range keys {
      lower_keys_val_ptr := (*C.wasi_keyvalue_types_key_t)(unsafe.Pointer(uintptr(unsafe.Pointer(lower_keys_val.ptr)) +
      uintptr(lower_keys_val_i)*unsafe.Sizeof(empty_lower_keys_val)))
      var lower_keys_val_ptr_value C.hello_cosmo_string_t
      var lower_keys_val_ptr_value_val C.hello_cosmo_string_t
      
      lower_keys_val_ptr_value_val.ptr = C.CString(keys[lower_keys_val_i])
      lower_keys_val_ptr_value_val.len = C.size_t(len(keys[lower_keys_val_i]))
      lower_keys_val_ptr_value = lower_keys_val_ptr_value_val
      *lower_keys_val_ptr = lower_keys_val_ptr_value
    }
  }
  lower_keys = lower_keys_val
  defer C.wasi_keyvalue_batch_keys_free(&lower_keys)
  var ret C.hello_cosmo_result_void_wasi_keyvalue_batch_error_t
  C.wasi_keyvalue_batch_delete_many(lower_bucket, &lower_keys, &ret)
  var lift_ret Result[struct{}, uint32]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_keyvalue_batch_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val uint32
    var lift_ret_val_val uint32
    var lift_ret_val_val_val uint32
    var lift_ret_val_val_val_val uint32
    lift_ret_val_val_val_val = uint32(lift_ret_ptr)
    lift_ret_val_val_val = lift_ret_val_val_val_val
    lift_ret_val_val = lift_ret_val_val_val
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

// Import functions from wasi:http/http-types
func WasiHttpHttpTypesDropFields(fields uint32) {
  var lower_fields C.uint32_t
  lower_fields_val := C.uint32_t(fields)
  lower_fields = lower_fields_val
  C.wasi_http_http_types_drop_fields(lower_fields)
}

func WasiHttpHttpTypesNewFields(entries []WasiHttpHttpTypesTuple2StringListU8TT) uint32 {
  var lower_entries C.hello_cosmo_list_tuple2_string_list_u8_t
  if len(entries) == 0 {
    lower_entries.ptr = nil
    lower_entries.len = 0
  } else {
    var empty_lower_entries C.hello_cosmo_tuple2_string_list_u8_t
    lower_entries.ptr = (*C.hello_cosmo_tuple2_string_list_u8_t)(C.malloc(C.size_t(len(entries)) * C.size_t(unsafe.Sizeof(empty_lower_entries))))
    lower_entries.len = C.size_t(len(entries))
    for lower_entries_i := range entries {
      lower_entries_ptr := (*C.hello_cosmo_tuple2_string_list_u8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(lower_entries.ptr)) +
      uintptr(lower_entries_i)*unsafe.Sizeof(empty_lower_entries)))
      var lower_entries_ptr_value C.hello_cosmo_tuple2_string_list_u8_t
      var lower_entries_ptr_value_f0 C.hello_cosmo_string_t
      
      lower_entries_ptr_value_f0.ptr = C.CString(entries[lower_entries_i].F0)
      lower_entries_ptr_value_f0.len = C.size_t(len(entries[lower_entries_i].F0))
      lower_entries_ptr_value.f0 = lower_entries_ptr_value_f0
      var lower_entries_ptr_value_f1 C.hello_cosmo_list_u8_t
      if len(entries[lower_entries_i].F1) == 0 {
        lower_entries_ptr_value_f1.ptr = nil
        lower_entries_ptr_value_f1.len = 0
      } else {
        var empty_lower_entries_ptr_value_f1 C.uint8_t
        lower_entries_ptr_value_f1.ptr = (*C.uint8_t)(C.malloc(C.size_t(len(entries[lower_entries_i].F1)) * C.size_t(unsafe.Sizeof(empty_lower_entries_ptr_value_f1))))
        lower_entries_ptr_value_f1.len = C.size_t(len(entries[lower_entries_i].F1))
        for lower_entries_ptr_value_f1_i := range entries[lower_entries_i].F1 {
          lower_entries_ptr_value_f1_ptr := (*C.uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(lower_entries_ptr_value_f1.ptr)) +
          uintptr(lower_entries_ptr_value_f1_i)*unsafe.Sizeof(empty_lower_entries_ptr_value_f1)))
          lower_entries_ptr_value_f1_ptr_value := C.uint8_t(entries[lower_entries_i].F1[lower_entries_ptr_value_f1_i])
          *lower_entries_ptr_value_f1_ptr = lower_entries_ptr_value_f1_ptr_value
        }
      }
      lower_entries_ptr_value.f1 = lower_entries_ptr_value_f1
      *lower_entries_ptr = lower_entries_ptr_value
    }
  }
  defer C.hello_cosmo_list_tuple2_string_list_u8_free(&lower_entries)
  ret := C.wasi_http_http_types_new_fields(&lower_entries)
  var lift_ret uint32
  var lift_ret_val uint32
  lift_ret_val = uint32(ret)
  lift_ret = lift_ret_val
  return lift_ret
}

func WasiHttpHttpTypesFieldsGet(fields uint32, name string) [][]uint8 {
  var lower_fields C.uint32_t
  lower_fields_val := C.uint32_t(fields)
  lower_fields = lower_fields_val
  var lower_name C.hello_cosmo_string_t
  
  lower_name.ptr = C.CString(name)
  lower_name.len = C.size_t(len(name))
  defer C.hello_cosmo_string_free(&lower_name)
  var ret C.hello_cosmo_list_list_u8_t
  C.wasi_http_http_types_fields_get(lower_fields, &lower_name, &ret)
  var lift_ret [][]uint8
  lift_ret = make([][]uint8, ret.len)
  if ret.len > 0 {
    for lift_ret_i := 0; lift_ret_i < int(ret.len); lift_ret_i++ {
      var empty_lift_ret C.hello_cosmo_list_u8_t
      lift_ret_ptr := *(*C.hello_cosmo_list_u8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(ret.ptr)) +
      uintptr(lift_ret_i)*unsafe.Sizeof(empty_lift_ret)))
      var list_lift_ret []uint8
      list_lift_ret = make([]uint8, lift_ret_ptr.len)
      if lift_ret_ptr.len > 0 {
        for list_lift_ret_i := 0; list_lift_ret_i < int(lift_ret_ptr.len); list_lift_ret_i++ {
          var empty_list_lift_ret C.uint8_t
          list_lift_ret_ptr := *(*C.uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(lift_ret_ptr.ptr)) +
          uintptr(list_lift_ret_i)*unsafe.Sizeof(empty_list_lift_ret)))
          var list_list_lift_ret uint8
          list_list_lift_ret = uint8(list_lift_ret_ptr)
          list_lift_ret[list_lift_ret_i] = list_list_lift_ret
        }
      }
      lift_ret[lift_ret_i] = list_lift_ret
    }
  }
  return lift_ret
}

func WasiHttpHttpTypesFieldsSet(fields uint32, name string, value [][]uint8) {
  var lower_fields C.uint32_t
  lower_fields_val := C.uint32_t(fields)
  lower_fields = lower_fields_val
  var lower_name C.hello_cosmo_string_t
  
  lower_name.ptr = C.CString(name)
  lower_name.len = C.size_t(len(name))
  defer C.hello_cosmo_string_free(&lower_name)
  var lower_value C.hello_cosmo_list_list_u8_t
  if len(value) == 0 {
    lower_value.ptr = nil
    lower_value.len = 0
  } else {
    var empty_lower_value C.hello_cosmo_list_u8_t
    lower_value.ptr = (*C.hello_cosmo_list_u8_t)(C.malloc(C.size_t(len(value)) * C.size_t(unsafe.Sizeof(empty_lower_value))))
    lower_value.len = C.size_t(len(value))
    for lower_value_i := range value {
      lower_value_ptr := (*C.hello_cosmo_list_u8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(lower_value.ptr)) +
      uintptr(lower_value_i)*unsafe.Sizeof(empty_lower_value)))
      if len(value[lower_value_i]) == 0 {
        lower_value_ptr.ptr = nil
        lower_value_ptr.len = 0
      } else {
        var empty_lower_value_ptr C.uint8_t
        lower_value_ptr.ptr = (*C.uint8_t)(C.malloc(C.size_t(len(value[lower_value_i])) * C.size_t(unsafe.Sizeof(empty_lower_value_ptr))))
        lower_value_ptr.len = C.size_t(len(value[lower_value_i]))
        for lower_value_ptr_i := range value[lower_value_i] {
          lower_value_ptr_ptr := (*C.uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(lower_value_ptr.ptr)) +
          uintptr(lower_value_ptr_i)*unsafe.Sizeof(empty_lower_value_ptr)))
          lower_value_ptr_ptr_value := C.uint8_t(value[lower_value_i][lower_value_ptr_i])
          *lower_value_ptr_ptr = lower_value_ptr_ptr_value
        }
      }
    }
  }
  defer C.hello_cosmo_list_list_u8_free(&lower_value)
  C.wasi_http_http_types_fields_set(lower_fields, &lower_name, &lower_value)
}

func WasiHttpHttpTypesFieldsDelete(fields uint32, name string) {
  var lower_fields C.uint32_t
  lower_fields_val := C.uint32_t(fields)
  lower_fields = lower_fields_val
  var lower_name C.hello_cosmo_string_t
  
  lower_name.ptr = C.CString(name)
  lower_name.len = C.size_t(len(name))
  defer C.hello_cosmo_string_free(&lower_name)
  C.wasi_http_http_types_fields_delete(lower_fields, &lower_name)
}

func WasiHttpHttpTypesFieldsAppend(fields uint32, name string, value []uint8) {
  var lower_fields C.uint32_t
  lower_fields_val := C.uint32_t(fields)
  lower_fields = lower_fields_val
  var lower_name C.hello_cosmo_string_t
  
  lower_name.ptr = C.CString(name)
  lower_name.len = C.size_t(len(name))
  defer C.hello_cosmo_string_free(&lower_name)
  var lower_value C.hello_cosmo_list_u8_t
  if len(value) == 0 {
    lower_value.ptr = nil
    lower_value.len = 0
  } else {
    var empty_lower_value C.uint8_t
    lower_value.ptr = (*C.uint8_t)(C.malloc(C.size_t(len(value)) * C.size_t(unsafe.Sizeof(empty_lower_value))))
    lower_value.len = C.size_t(len(value))
    for lower_value_i := range value {
      lower_value_ptr := (*C.uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(lower_value.ptr)) +
      uintptr(lower_value_i)*unsafe.Sizeof(empty_lower_value)))
      lower_value_ptr_value := C.uint8_t(value[lower_value_i])
      *lower_value_ptr = lower_value_ptr_value
    }
  }
  defer C.hello_cosmo_list_u8_free(&lower_value)
  C.wasi_http_http_types_fields_append(lower_fields, &lower_name, &lower_value)
}

func WasiHttpHttpTypesFieldsEntries(fields uint32) []WasiHttpHttpTypesTuple2StringListU8TT {
  var lower_fields C.uint32_t
  lower_fields_val := C.uint32_t(fields)
  lower_fields = lower_fields_val
  var ret C.hello_cosmo_list_tuple2_string_list_u8_t
  C.wasi_http_http_types_fields_entries(lower_fields, &ret)
  var lift_ret []WasiHttpHttpTypesTuple2StringListU8TT
  lift_ret = make([]WasiHttpHttpTypesTuple2StringListU8TT, ret.len)
  if ret.len > 0 {
    for lift_ret_i := 0; lift_ret_i < int(ret.len); lift_ret_i++ {
      var empty_lift_ret C.hello_cosmo_tuple2_string_list_u8_t
      lift_ret_ptr := *(*C.hello_cosmo_tuple2_string_list_u8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(ret.ptr)) +
      uintptr(lift_ret_i)*unsafe.Sizeof(empty_lift_ret)))
      var list_lift_ret WasiHttpHttpTypesTuple2StringListU8TT
      var list_lift_ret_F0 string
      list_lift_ret_F0 = C.GoStringN(lift_ret_ptr.f0.ptr, C.int(lift_ret_ptr.f0.len))
      list_lift_ret.F0 = list_lift_ret_F0
      var list_lift_ret_F1 []uint8
      list_lift_ret_F1 = make([]uint8, lift_ret_ptr.f1.len)
      if lift_ret_ptr.f1.len > 0 {
        for list_lift_ret_F1_i := 0; list_lift_ret_F1_i < int(lift_ret_ptr.f1.len); list_lift_ret_F1_i++ {
          var empty_list_lift_ret_F1 C.uint8_t
          list_lift_ret_F1_ptr := *(*C.uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(lift_ret_ptr.f1.ptr)) +
          uintptr(list_lift_ret_F1_i)*unsafe.Sizeof(empty_list_lift_ret_F1)))
          var list_list_lift_ret_F1 uint8
          list_list_lift_ret_F1 = uint8(list_lift_ret_F1_ptr)
          list_lift_ret_F1[list_lift_ret_F1_i] = list_list_lift_ret_F1
        }
      }
      list_lift_ret.F1 = list_lift_ret_F1
      lift_ret[lift_ret_i] = list_lift_ret
    }
  }
  return lift_ret
}

func WasiHttpHttpTypesFieldsClone(fields uint32) uint32 {
  var lower_fields C.uint32_t
  lower_fields_val := C.uint32_t(fields)
  lower_fields = lower_fields_val
  ret := C.wasi_http_http_types_fields_clone(lower_fields)
  var lift_ret uint32
  var lift_ret_val uint32
  lift_ret_val = uint32(ret)
  lift_ret = lift_ret_val
  return lift_ret
}

func WasiHttpHttpTypesFinishIncomingStream(s uint32) Option[uint32] {
  var lower_s C.wasi_http_http_types_input_stream_t
  var lower_s_val C.wasi_io_streams_input_stream_t
  var lower_s_val_val C.uint32_t
  lower_s_val_val_val := C.uint32_t(s)
  lower_s_val_val = lower_s_val_val_val
  lower_s_val = lower_s_val_val
  lower_s = lower_s_val
  var ret C.hello_cosmo_option_wasi_http_http_types_future_trailers_t
  C.wasi_http_http_types_finish_incoming_stream(lower_s, &ret)
  var lift_ret Option[uint32]
  if ret.is_some {
    var lift_ret_val uint32
    var lift_ret_val_val uint32
    lift_ret_val_val = uint32(ret.val)
    lift_ret_val = lift_ret_val_val
    lift_ret.Set(lift_ret_val)
  } else {
    lift_ret.Unset()
  }
  return lift_ret
}

func WasiHttpHttpTypesFinishOutgoingStream(s uint32) {
  var lower_s C.wasi_http_http_types_output_stream_t
  var lower_s_val C.wasi_io_streams_output_stream_t
  var lower_s_val_val C.uint32_t
  lower_s_val_val_val := C.uint32_t(s)
  lower_s_val_val = lower_s_val_val_val
  lower_s_val = lower_s_val_val
  lower_s = lower_s_val
  C.wasi_http_http_types_finish_outgoing_stream(lower_s)
}

func WasiHttpHttpTypesFinishOutgoingStreamWithTrailers(s uint32, trailers uint32) uint32 {
  var lower_s C.wasi_http_http_types_output_stream_t
  var lower_s_val C.wasi_io_streams_output_stream_t
  var lower_s_val_val C.uint32_t
  lower_s_val_val_val := C.uint32_t(s)
  lower_s_val_val = lower_s_val_val_val
  lower_s_val = lower_s_val_val
  lower_s = lower_s_val
  var lower_trailers C.wasi_http_http_types_fields_t
  var lower_trailers_val C.uint32_t
  lower_trailers_val_val := C.uint32_t(trailers)
  lower_trailers_val = lower_trailers_val_val
  lower_trailers = lower_trailers_val
  ret := C.wasi_http_http_types_finish_outgoing_stream_with_trailers(lower_s, lower_trailers)
  var lift_ret uint32
  var lift_ret_val uint32
  lift_ret_val = uint32(ret)
  lift_ret = lift_ret_val
  return lift_ret
}

func WasiHttpHttpTypesDropFutureTrailers(f uint32) {
  var lower_f C.uint32_t
  lower_f_val := C.uint32_t(f)
  lower_f = lower_f_val
  C.wasi_http_http_types_drop_future_trailers(lower_f)
}

func WasiHttpHttpTypesFutureTrailersGet(f uint32) Option[Result[uint32, WasiHttpHttpTypesError]] {
  var lower_f C.uint32_t
  lower_f_val := C.uint32_t(f)
  lower_f = lower_f_val
  var ret C.hello_cosmo_option_result_wasi_http_http_types_trailers_wasi_http_http_types_error_t
  C.wasi_http_http_types_future_trailers_get(lower_f, &ret)
  var lift_ret Option[Result[uint32, WasiHttpHttpTypesError]]
  if ret.is_some {
    var lift_ret_val Result[uint32, WasiHttpHttpTypesError]
    if ret.val.is_err {
      lift_ret_val_ptr := *(*C.wasi_http_http_types_error_t)(unsafe.Pointer(&ret.val.val))
      var lift_ret_val_val WasiHttpHttpTypesError
      if lift_ret_val_ptr.tag == 0 {
        lift_ret_val_val_ptr := *(*C.hello_cosmo_string_t)(unsafe.Pointer(&lift_ret_val_ptr.val))
        var lift_ret_val_val_val string
        lift_ret_val_val_val = C.GoStringN(lift_ret_val_val_ptr.ptr, C.int(lift_ret_val_val_ptr.len))
        lift_ret_val_val = WasiHttpHttpTypesErrorInvalidUrl(lift_ret_val_val_val)
      }
      if lift_ret_val_ptr.tag == 1 {
        lift_ret_val_val_ptr := *(*C.hello_cosmo_string_t)(unsafe.Pointer(&lift_ret_val_ptr.val))
        var lift_ret_val_val_val string
        lift_ret_val_val_val = C.GoStringN(lift_ret_val_val_ptr.ptr, C.int(lift_ret_val_val_ptr.len))
        lift_ret_val_val = WasiHttpHttpTypesErrorTimeoutError(lift_ret_val_val_val)
      }
      if lift_ret_val_ptr.tag == 2 {
        lift_ret_val_val_ptr := *(*C.hello_cosmo_string_t)(unsafe.Pointer(&lift_ret_val_ptr.val))
        var lift_ret_val_val_val string
        lift_ret_val_val_val = C.GoStringN(lift_ret_val_val_ptr.ptr, C.int(lift_ret_val_val_ptr.len))
        lift_ret_val_val = WasiHttpHttpTypesErrorProtocolError(lift_ret_val_val_val)
      }
      if lift_ret_val_ptr.tag == 3 {
        lift_ret_val_val_ptr := *(*C.hello_cosmo_string_t)(unsafe.Pointer(&lift_ret_val_ptr.val))
        var lift_ret_val_val_val string
        lift_ret_val_val_val = C.GoStringN(lift_ret_val_val_ptr.ptr, C.int(lift_ret_val_val_ptr.len))
        lift_ret_val_val = WasiHttpHttpTypesErrorUnexpectedError(lift_ret_val_val_val)
      }
      lift_ret_val.SetErr(lift_ret_val_val)
    } else {
      lift_ret_val_ptr := *(*C.wasi_http_http_types_trailers_t)(unsafe.Pointer(&ret.val.val))
      var lift_ret_val_val uint32
      var lift_ret_val_val_val uint32
      var lift_ret_val_val_val_val uint32
      lift_ret_val_val_val_val = uint32(lift_ret_val_ptr)
      lift_ret_val_val_val = lift_ret_val_val_val_val
      lift_ret_val_val = lift_ret_val_val_val
      lift_ret_val.Set(lift_ret_val_val)
    }
    lift_ret.Set(lift_ret_val)
  } else {
    lift_ret.Unset()
  }
  return lift_ret
}

func WasiHttpHttpTypesListenToFutureTrailers(f uint32) uint32 {
  var lower_f C.uint32_t
  lower_f_val := C.uint32_t(f)
  lower_f = lower_f_val
  ret := C.wasi_http_http_types_listen_to_future_trailers(lower_f)
  var lift_ret uint32
  var lift_ret_val uint32
  var lift_ret_val_val uint32
  lift_ret_val_val = uint32(ret)
  lift_ret_val = lift_ret_val_val
  lift_ret = lift_ret_val
  return lift_ret
}

func WasiHttpHttpTypesDropFutureWriteTrailersResult(f uint32) {
  var lower_f C.uint32_t
  lower_f_val := C.uint32_t(f)
  lower_f = lower_f_val
  C.wasi_http_http_types_drop_future_write_trailers_result(lower_f)
}

func WasiHttpHttpTypesFutureWriteTrailersResultGet(f uint32) Option[Result[struct{}, WasiHttpHttpTypesError]] {
  var lower_f C.uint32_t
  lower_f_val := C.uint32_t(f)
  lower_f = lower_f_val
  var ret C.hello_cosmo_option_result_void_wasi_http_http_types_error_t
  C.wasi_http_http_types_future_write_trailers_result_get(lower_f, &ret)
  var lift_ret Option[Result[struct{}, WasiHttpHttpTypesError]]
  if ret.is_some {
    var lift_ret_val Result[struct{}, WasiHttpHttpTypesError]
    if ret.val.is_err {
      lift_ret_val_ptr := *(*C.wasi_http_http_types_error_t)(unsafe.Pointer(&ret.val.val))
      var lift_ret_val_val WasiHttpHttpTypesError
      if lift_ret_val_ptr.tag == 0 {
        lift_ret_val_val_ptr := *(*C.hello_cosmo_string_t)(unsafe.Pointer(&lift_ret_val_ptr.val))
        var lift_ret_val_val_val string
        lift_ret_val_val_val = C.GoStringN(lift_ret_val_val_ptr.ptr, C.int(lift_ret_val_val_ptr.len))
        lift_ret_val_val = WasiHttpHttpTypesErrorInvalidUrl(lift_ret_val_val_val)
      }
      if lift_ret_val_ptr.tag == 1 {
        lift_ret_val_val_ptr := *(*C.hello_cosmo_string_t)(unsafe.Pointer(&lift_ret_val_ptr.val))
        var lift_ret_val_val_val string
        lift_ret_val_val_val = C.GoStringN(lift_ret_val_val_ptr.ptr, C.int(lift_ret_val_val_ptr.len))
        lift_ret_val_val = WasiHttpHttpTypesErrorTimeoutError(lift_ret_val_val_val)
      }
      if lift_ret_val_ptr.tag == 2 {
        lift_ret_val_val_ptr := *(*C.hello_cosmo_string_t)(unsafe.Pointer(&lift_ret_val_ptr.val))
        var lift_ret_val_val_val string
        lift_ret_val_val_val = C.GoStringN(lift_ret_val_val_ptr.ptr, C.int(lift_ret_val_val_ptr.len))
        lift_ret_val_val = WasiHttpHttpTypesErrorProtocolError(lift_ret_val_val_val)
      }
      if lift_ret_val_ptr.tag == 3 {
        lift_ret_val_val_ptr := *(*C.hello_cosmo_string_t)(unsafe.Pointer(&lift_ret_val_ptr.val))
        var lift_ret_val_val_val string
        lift_ret_val_val_val = C.GoStringN(lift_ret_val_val_ptr.ptr, C.int(lift_ret_val_val_ptr.len))
        lift_ret_val_val = WasiHttpHttpTypesErrorUnexpectedError(lift_ret_val_val_val)
      }
      lift_ret_val.SetErr(lift_ret_val_val)
    } else {
    }
    lift_ret.Set(lift_ret_val)
  } else {
    lift_ret.Unset()
  }
  return lift_ret
}

func WasiHttpHttpTypesListenToFutureWriteTrailersResult(f uint32) uint32 {
  var lower_f C.uint32_t
  lower_f_val := C.uint32_t(f)
  lower_f = lower_f_val
  ret := C.wasi_http_http_types_listen_to_future_write_trailers_result(lower_f)
  var lift_ret uint32
  var lift_ret_val uint32
  var lift_ret_val_val uint32
  lift_ret_val_val = uint32(ret)
  lift_ret_val = lift_ret_val_val
  lift_ret = lift_ret_val
  return lift_ret
}

func WasiHttpHttpTypesDropIncomingRequest(request uint32) {
  var lower_request C.uint32_t
  lower_request_val := C.uint32_t(request)
  lower_request = lower_request_val
  C.wasi_http_http_types_drop_incoming_request(lower_request)
}

func WasiHttpHttpTypesDropOutgoingRequest(request uint32) {
  var lower_request C.uint32_t
  lower_request_val := C.uint32_t(request)
  lower_request = lower_request_val
  C.wasi_http_http_types_drop_outgoing_request(lower_request)
}

func WasiHttpHttpTypesIncomingRequestMethod(request uint32) WasiHttpHttpTypesMethod {
  var lower_request C.uint32_t
  lower_request_val := C.uint32_t(request)
  lower_request = lower_request_val
  var ret C.wasi_http_http_types_method_t
  C.wasi_http_http_types_incoming_request_method(lower_request, &ret)
  var lift_ret WasiHttpHttpTypesMethod
  if ret.tag == 0 {
    lift_ret = WasiHttpHttpTypesMethodGet()
  }
  if ret.tag == 1 {
    lift_ret = WasiHttpHttpTypesMethodHead()
  }
  if ret.tag == 2 {
    lift_ret = WasiHttpHttpTypesMethodPost()
  }
  if ret.tag == 3 {
    lift_ret = WasiHttpHttpTypesMethodPut()
  }
  if ret.tag == 4 {
    lift_ret = WasiHttpHttpTypesMethodDelete()
  }
  if ret.tag == 5 {
    lift_ret = WasiHttpHttpTypesMethodConnect()
  }
  if ret.tag == 6 {
    lift_ret = WasiHttpHttpTypesMethodOptions()
  }
  if ret.tag == 7 {
    lift_ret = WasiHttpHttpTypesMethodTrace()
  }
  if ret.tag == 8 {
    lift_ret = WasiHttpHttpTypesMethodPatch()
  }
  if ret.tag == 9 {
    lift_ret_ptr := *(*C.hello_cosmo_string_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val string
    lift_ret_val = C.GoStringN(lift_ret_ptr.ptr, C.int(lift_ret_ptr.len))
    lift_ret = WasiHttpHttpTypesMethodOther(lift_ret_val)
  }
  return lift_ret
}

func WasiHttpHttpTypesIncomingRequestPathWithQuery(request uint32) Option[string] {
  var lower_request C.uint32_t
  lower_request_val := C.uint32_t(request)
  lower_request = lower_request_val
  var ret C.hello_cosmo_option_string_t
  C.wasi_http_http_types_incoming_request_path_with_query(lower_request, &ret)
  var lift_ret Option[string]
  if ret.is_some {
    var lift_ret_val string
    lift_ret_val = C.GoStringN(ret.val.ptr, C.int(ret.val.len))
    lift_ret.Set(lift_ret_val)
  } else {
    lift_ret.Unset()
  }
  return lift_ret
}

func WasiHttpHttpTypesIncomingRequestScheme(request uint32) Option[WasiHttpHttpTypesScheme] {
  var lower_request C.uint32_t
  lower_request_val := C.uint32_t(request)
  lower_request = lower_request_val
  var ret C.hello_cosmo_option_wasi_http_http_types_scheme_t
  C.wasi_http_http_types_incoming_request_scheme(lower_request, &ret)
  var lift_ret Option[WasiHttpHttpTypesScheme]
  if ret.is_some {
    var lift_ret_val WasiHttpHttpTypesScheme
    if ret.val.tag == 0 {
      lift_ret_val = WasiHttpHttpTypesSchemeHttp()
    }
    if ret.val.tag == 1 {
      lift_ret_val = WasiHttpHttpTypesSchemeHttps()
    }
    if ret.val.tag == 2 {
      lift_ret_val_ptr := *(*C.hello_cosmo_string_t)(unsafe.Pointer(&ret.val.val))
      var lift_ret_val_val string
      lift_ret_val_val = C.GoStringN(lift_ret_val_ptr.ptr, C.int(lift_ret_val_ptr.len))
      lift_ret_val = WasiHttpHttpTypesSchemeOther(lift_ret_val_val)
    }
    lift_ret.Set(lift_ret_val)
  } else {
    lift_ret.Unset()
  }
  return lift_ret
}

func WasiHttpHttpTypesIncomingRequestAuthority(request uint32) Option[string] {
  var lower_request C.uint32_t
  lower_request_val := C.uint32_t(request)
  lower_request = lower_request_val
  var ret C.hello_cosmo_option_string_t
  C.wasi_http_http_types_incoming_request_authority(lower_request, &ret)
  var lift_ret Option[string]
  if ret.is_some {
    var lift_ret_val string
    lift_ret_val = C.GoStringN(ret.val.ptr, C.int(ret.val.len))
    lift_ret.Set(lift_ret_val)
  } else {
    lift_ret.Unset()
  }
  return lift_ret
}

func WasiHttpHttpTypesIncomingRequestHeaders(request uint32) uint32 {
  var lower_request C.uint32_t
  lower_request_val := C.uint32_t(request)
  lower_request = lower_request_val
  ret := C.wasi_http_http_types_incoming_request_headers(lower_request)
  var lift_ret uint32
  var lift_ret_val uint32
  var lift_ret_val_val uint32
  lift_ret_val_val = uint32(ret)
  lift_ret_val = lift_ret_val_val
  lift_ret = lift_ret_val
  return lift_ret
}

func WasiHttpHttpTypesIncomingRequestConsume(request uint32) Result[uint32, struct{}] {
  var lower_request C.uint32_t
  lower_request_val := C.uint32_t(request)
  lower_request = lower_request_val
  var ret C.hello_cosmo_result_wasi_http_http_types_incoming_stream_void_t
  C.wasi_http_http_types_incoming_request_consume(lower_request, &ret)
  var lift_ret Result[uint32, struct{}]
  if ret.is_err {
    lift_ret.SetErr(struct{}{})
  } else {
    lift_ret_ptr := *(*C.wasi_http_http_types_incoming_stream_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val uint32
    var lift_ret_val_val uint32
    var lift_ret_val_val_val uint32
    var lift_ret_val_val_val_val uint32
    lift_ret_val_val_val_val = uint32(lift_ret_ptr)
    lift_ret_val_val_val = lift_ret_val_val_val_val
    lift_ret_val_val = lift_ret_val_val_val
    lift_ret_val = lift_ret_val_val
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func WasiHttpHttpTypesNewOutgoingRequest(method WasiHttpHttpTypesMethod, path_with_query Option[string], scheme Option[WasiHttpHttpTypesScheme], authority Option[string], headers uint32) Result[uint32, WasiHttpHttpTypesError] {
  var lower_method C.wasi_http_http_types_method_t
  if method.Kind() == WasiHttpHttpTypesMethodKindGet {
    lower_method.tag = 0
  }
  if method.Kind() == WasiHttpHttpTypesMethodKindHead {
    lower_method.tag = 1
  }
  if method.Kind() == WasiHttpHttpTypesMethodKindPost {
    lower_method.tag = 2
  }
  if method.Kind() == WasiHttpHttpTypesMethodKindPut {
    lower_method.tag = 3
  }
  if method.Kind() == WasiHttpHttpTypesMethodKindDelete {
    lower_method.tag = 4
  }
  if method.Kind() == WasiHttpHttpTypesMethodKindConnect {
    lower_method.tag = 5
  }
  if method.Kind() == WasiHttpHttpTypesMethodKindOptions {
    lower_method.tag = 6
  }
  if method.Kind() == WasiHttpHttpTypesMethodKindTrace {
    lower_method.tag = 7
  }
  if method.Kind() == WasiHttpHttpTypesMethodKindPatch {
    lower_method.tag = 8
  }
  if method.Kind() == WasiHttpHttpTypesMethodKindOther {
    
    lower_method.tag = 9
    lower_method_ptr := (*C.hello_cosmo_string_t)(unsafe.Pointer(&lower_method.val))
    var lower_method_val C.hello_cosmo_string_t
    
    lower_method_val.ptr = C.CString(method.GetOther())
    lower_method_val.len = C.size_t(len(method.GetOther()))
    *lower_method_ptr = lower_method_val
  }
  defer C.wasi_http_http_types_method_free(&lower_method)
  var lower_path_with_query C.hello_cosmo_option_string_t
  if path_with_query.IsSome() {
    var lower_path_with_query_val C.hello_cosmo_string_t
    
    lower_path_with_query_val.ptr = C.CString(path_with_query.Unwrap())
    lower_path_with_query_val.len = C.size_t(len(path_with_query.Unwrap()))
    lower_path_with_query.val = lower_path_with_query_val
    lower_path_with_query.is_some = true
  }
  defer C.hello_cosmo_option_string_free(&lower_path_with_query)
  var lower_scheme C.hello_cosmo_option_wasi_http_http_types_scheme_t
  if scheme.IsSome() {
    var lower_scheme_val C.wasi_http_http_types_scheme_t
    if scheme.Unwrap().Kind() == WasiHttpHttpTypesSchemeKindHttp {
      lower_scheme_val.tag = 0
    }
    if scheme.Unwrap().Kind() == WasiHttpHttpTypesSchemeKindHttps {
      lower_scheme_val.tag = 1
    }
    if scheme.Unwrap().Kind() == WasiHttpHttpTypesSchemeKindOther {
      
      lower_scheme_val.tag = 2
      lower_scheme_val_ptr := (*C.hello_cosmo_string_t)(unsafe.Pointer(&lower_scheme_val.val))
      var lower_scheme_val_val C.hello_cosmo_string_t
      
      lower_scheme_val_val.ptr = C.CString(scheme.Unwrap().GetOther())
      lower_scheme_val_val.len = C.size_t(len(scheme.Unwrap().GetOther()))
      *lower_scheme_val_ptr = lower_scheme_val_val
    }
    lower_scheme.val = lower_scheme_val
    lower_scheme.is_some = true
  }
  defer C.hello_cosmo_option_wasi_http_http_types_scheme_free(&lower_scheme)
  var lower_authority C.hello_cosmo_option_string_t
  if authority.IsSome() {
    var lower_authority_val C.hello_cosmo_string_t
    
    lower_authority_val.ptr = C.CString(authority.Unwrap())
    lower_authority_val.len = C.size_t(len(authority.Unwrap()))
    lower_authority.val = lower_authority_val
    lower_authority.is_some = true
  }
  defer C.hello_cosmo_option_string_free(&lower_authority)
  var lower_headers C.wasi_http_http_types_fields_t
  var lower_headers_val C.uint32_t
  lower_headers_val_val := C.uint32_t(headers)
  lower_headers_val = lower_headers_val_val
  lower_headers = lower_headers_val
  var ret C.hello_cosmo_result_wasi_http_http_types_outgoing_request_wasi_http_http_types_error_t
  C.wasi_http_http_types_new_outgoing_request(&lower_method, &lower_path_with_query, &lower_scheme, &lower_authority, lower_headers, &ret)
  var lift_ret Result[uint32, WasiHttpHttpTypesError]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_http_http_types_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiHttpHttpTypesError
    if lift_ret_ptr.tag == 0 {
      lift_ret_val_ptr := *(*C.hello_cosmo_string_t)(unsafe.Pointer(&lift_ret_ptr.val))
      var lift_ret_val_val string
      lift_ret_val_val = C.GoStringN(lift_ret_val_ptr.ptr, C.int(lift_ret_val_ptr.len))
      lift_ret_val = WasiHttpHttpTypesErrorInvalidUrl(lift_ret_val_val)
    }
    if lift_ret_ptr.tag == 1 {
      lift_ret_val_ptr := *(*C.hello_cosmo_string_t)(unsafe.Pointer(&lift_ret_ptr.val))
      var lift_ret_val_val string
      lift_ret_val_val = C.GoStringN(lift_ret_val_ptr.ptr, C.int(lift_ret_val_ptr.len))
      lift_ret_val = WasiHttpHttpTypesErrorTimeoutError(lift_ret_val_val)
    }
    if lift_ret_ptr.tag == 2 {
      lift_ret_val_ptr := *(*C.hello_cosmo_string_t)(unsafe.Pointer(&lift_ret_ptr.val))
      var lift_ret_val_val string
      lift_ret_val_val = C.GoStringN(lift_ret_val_ptr.ptr, C.int(lift_ret_val_ptr.len))
      lift_ret_val = WasiHttpHttpTypesErrorProtocolError(lift_ret_val_val)
    }
    if lift_ret_ptr.tag == 3 {
      lift_ret_val_ptr := *(*C.hello_cosmo_string_t)(unsafe.Pointer(&lift_ret_ptr.val))
      var lift_ret_val_val string
      lift_ret_val_val = C.GoStringN(lift_ret_val_ptr.ptr, C.int(lift_ret_val_ptr.len))
      lift_ret_val = WasiHttpHttpTypesErrorUnexpectedError(lift_ret_val_val)
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.wasi_http_http_types_outgoing_request_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val uint32
    var lift_ret_val_val uint32
    lift_ret_val_val = uint32(lift_ret_ptr)
    lift_ret_val = lift_ret_val_val
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func WasiHttpHttpTypesOutgoingRequestWrite(request uint32) Result[uint32, struct{}] {
  var lower_request C.uint32_t
  lower_request_val := C.uint32_t(request)
  lower_request = lower_request_val
  var ret C.hello_cosmo_result_wasi_http_http_types_outgoing_stream_void_t
  C.wasi_http_http_types_outgoing_request_write(lower_request, &ret)
  var lift_ret Result[uint32, struct{}]
  if ret.is_err {
    lift_ret.SetErr(struct{}{})
  } else {
    lift_ret_ptr := *(*C.wasi_http_http_types_outgoing_stream_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val uint32
    var lift_ret_val_val uint32
    var lift_ret_val_val_val uint32
    var lift_ret_val_val_val_val uint32
    lift_ret_val_val_val_val = uint32(lift_ret_ptr)
    lift_ret_val_val_val = lift_ret_val_val_val_val
    lift_ret_val_val = lift_ret_val_val_val
    lift_ret_val = lift_ret_val_val
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func WasiHttpHttpTypesDropResponseOutparam(response uint32) {
  var lower_response C.uint32_t
  lower_response_val := C.uint32_t(response)
  lower_response = lower_response_val
  C.wasi_http_http_types_drop_response_outparam(lower_response)
}

func WasiHttpHttpTypesSetResponseOutparam(param uint32, response Result[uint32, WasiHttpHttpTypesError]) Result[struct{}, struct{}] {
  var lower_param C.uint32_t
  lower_param_val := C.uint32_t(param)
  lower_param = lower_param_val
  var lower_response C.hello_cosmo_result_wasi_http_http_types_outgoing_response_wasi_http_http_types_error_t
  lower_response.is_err = response.IsErr()
  if response.IsOk() {
    lower_response_ptr := (*C.wasi_http_http_types_outgoing_response_t)(unsafe.Pointer(&lower_response.val))
    var lower_response_val C.uint32_t
    lower_response_val_val := C.uint32_t(response.Unwrap())
    lower_response_val = lower_response_val_val
    *lower_response_ptr = lower_response_val
  } else {
    lower_response_ptr := (*C.wasi_http_http_types_error_t)(unsafe.Pointer(&lower_response.val))
    var lower_response_val C.wasi_http_http_types_error_t
    if response.UnwrapErr().Kind() == WasiHttpHttpTypesErrorKindInvalidUrl {
      
      lower_response_val.tag = 0
      lower_response_val_ptr := (*C.hello_cosmo_string_t)(unsafe.Pointer(&lower_response_val.val))
      var lower_response_val_val C.hello_cosmo_string_t
      
      lower_response_val_val.ptr = C.CString(response.UnwrapErr().GetInvalidUrl())
      lower_response_val_val.len = C.size_t(len(response.UnwrapErr().GetInvalidUrl()))
      *lower_response_val_ptr = lower_response_val_val
    }
    if response.UnwrapErr().Kind() == WasiHttpHttpTypesErrorKindTimeoutError {
      
      lower_response_val.tag = 1
      lower_response_val_ptr := (*C.hello_cosmo_string_t)(unsafe.Pointer(&lower_response_val.val))
      var lower_response_val_val C.hello_cosmo_string_t
      
      lower_response_val_val.ptr = C.CString(response.UnwrapErr().GetTimeoutError())
      lower_response_val_val.len = C.size_t(len(response.UnwrapErr().GetTimeoutError()))
      *lower_response_val_ptr = lower_response_val_val
    }
    if response.UnwrapErr().Kind() == WasiHttpHttpTypesErrorKindProtocolError {
      
      lower_response_val.tag = 2
      lower_response_val_ptr := (*C.hello_cosmo_string_t)(unsafe.Pointer(&lower_response_val.val))
      var lower_response_val_val C.hello_cosmo_string_t
      
      lower_response_val_val.ptr = C.CString(response.UnwrapErr().GetProtocolError())
      lower_response_val_val.len = C.size_t(len(response.UnwrapErr().GetProtocolError()))
      *lower_response_val_ptr = lower_response_val_val
    }
    if response.UnwrapErr().Kind() == WasiHttpHttpTypesErrorKindUnexpectedError {
      
      lower_response_val.tag = 3
      lower_response_val_ptr := (*C.hello_cosmo_string_t)(unsafe.Pointer(&lower_response_val.val))
      var lower_response_val_val C.hello_cosmo_string_t
      
      lower_response_val_val.ptr = C.CString(response.UnwrapErr().GetUnexpectedError())
      lower_response_val_val.len = C.size_t(len(response.UnwrapErr().GetUnexpectedError()))
      *lower_response_val_ptr = lower_response_val_val
    }
    *lower_response_ptr = lower_response_val
  }
  defer C.hello_cosmo_result_wasi_http_http_types_outgoing_response_wasi_http_http_types_error_free(&lower_response)
  var ret C.hello_cosmo_result_void_void_t
  C.wasi_http_http_types_set_response_outparam(lower_param, &lower_response, &ret)
  var lift_ret Result[struct{}, struct{}]
  if ret.is_err {
    lift_ret.SetErr(struct{}{})
  } else {
  }
  return lift_ret
}

func WasiHttpHttpTypesDropIncomingResponse(response uint32) {
  var lower_response C.uint32_t
  lower_response_val := C.uint32_t(response)
  lower_response = lower_response_val
  C.wasi_http_http_types_drop_incoming_response(lower_response)
}

func WasiHttpHttpTypesDropOutgoingResponse(response uint32) {
  var lower_response C.uint32_t
  lower_response_val := C.uint32_t(response)
  lower_response = lower_response_val
  C.wasi_http_http_types_drop_outgoing_response(lower_response)
}

func WasiHttpHttpTypesIncomingResponseStatus(response uint32) uint16 {
  var lower_response C.uint32_t
  lower_response_val := C.uint32_t(response)
  lower_response = lower_response_val
  ret := C.wasi_http_http_types_incoming_response_status(lower_response)
  var lift_ret uint16
  var lift_ret_val uint16
  lift_ret_val = uint16(ret)
  lift_ret = lift_ret_val
  return lift_ret
}

func WasiHttpHttpTypesIncomingResponseHeaders(response uint32) uint32 {
  var lower_response C.uint32_t
  lower_response_val := C.uint32_t(response)
  lower_response = lower_response_val
  ret := C.wasi_http_http_types_incoming_response_headers(lower_response)
  var lift_ret uint32
  var lift_ret_val uint32
  var lift_ret_val_val uint32
  lift_ret_val_val = uint32(ret)
  lift_ret_val = lift_ret_val_val
  lift_ret = lift_ret_val
  return lift_ret
}

func WasiHttpHttpTypesIncomingResponseConsume(response uint32) Result[uint32, struct{}] {
  var lower_response C.uint32_t
  lower_response_val := C.uint32_t(response)
  lower_response = lower_response_val
  var ret C.hello_cosmo_result_wasi_http_http_types_incoming_stream_void_t
  C.wasi_http_http_types_incoming_response_consume(lower_response, &ret)
  var lift_ret Result[uint32, struct{}]
  if ret.is_err {
    lift_ret.SetErr(struct{}{})
  } else {
    lift_ret_ptr := *(*C.wasi_http_http_types_incoming_stream_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val uint32
    var lift_ret_val_val uint32
    var lift_ret_val_val_val uint32
    var lift_ret_val_val_val_val uint32
    lift_ret_val_val_val_val = uint32(lift_ret_ptr)
    lift_ret_val_val_val = lift_ret_val_val_val_val
    lift_ret_val_val = lift_ret_val_val_val
    lift_ret_val = lift_ret_val_val
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func WasiHttpHttpTypesNewOutgoingResponse(status_code uint16, headers uint32) Result[uint32, WasiHttpHttpTypesError] {
  var lower_status_code C.uint16_t
  lower_status_code_val := C.uint16_t(status_code)
  lower_status_code = lower_status_code_val
  var lower_headers C.wasi_http_http_types_fields_t
  var lower_headers_val C.uint32_t
  lower_headers_val_val := C.uint32_t(headers)
  lower_headers_val = lower_headers_val_val
  lower_headers = lower_headers_val
  var ret C.hello_cosmo_result_wasi_http_http_types_outgoing_response_wasi_http_http_types_error_t
  C.wasi_http_http_types_new_outgoing_response(lower_status_code, lower_headers, &ret)
  var lift_ret Result[uint32, WasiHttpHttpTypesError]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_http_http_types_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiHttpHttpTypesError
    if lift_ret_ptr.tag == 0 {
      lift_ret_val_ptr := *(*C.hello_cosmo_string_t)(unsafe.Pointer(&lift_ret_ptr.val))
      var lift_ret_val_val string
      lift_ret_val_val = C.GoStringN(lift_ret_val_ptr.ptr, C.int(lift_ret_val_ptr.len))
      lift_ret_val = WasiHttpHttpTypesErrorInvalidUrl(lift_ret_val_val)
    }
    if lift_ret_ptr.tag == 1 {
      lift_ret_val_ptr := *(*C.hello_cosmo_string_t)(unsafe.Pointer(&lift_ret_ptr.val))
      var lift_ret_val_val string
      lift_ret_val_val = C.GoStringN(lift_ret_val_ptr.ptr, C.int(lift_ret_val_ptr.len))
      lift_ret_val = WasiHttpHttpTypesErrorTimeoutError(lift_ret_val_val)
    }
    if lift_ret_ptr.tag == 2 {
      lift_ret_val_ptr := *(*C.hello_cosmo_string_t)(unsafe.Pointer(&lift_ret_ptr.val))
      var lift_ret_val_val string
      lift_ret_val_val = C.GoStringN(lift_ret_val_ptr.ptr, C.int(lift_ret_val_ptr.len))
      lift_ret_val = WasiHttpHttpTypesErrorProtocolError(lift_ret_val_val)
    }
    if lift_ret_ptr.tag == 3 {
      lift_ret_val_ptr := *(*C.hello_cosmo_string_t)(unsafe.Pointer(&lift_ret_ptr.val))
      var lift_ret_val_val string
      lift_ret_val_val = C.GoStringN(lift_ret_val_ptr.ptr, C.int(lift_ret_val_ptr.len))
      lift_ret_val = WasiHttpHttpTypesErrorUnexpectedError(lift_ret_val_val)
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.wasi_http_http_types_outgoing_response_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val uint32
    var lift_ret_val_val uint32
    lift_ret_val_val = uint32(lift_ret_ptr)
    lift_ret_val = lift_ret_val_val
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func WasiHttpHttpTypesOutgoingResponseWrite(response uint32) Result[uint32, struct{}] {
  var lower_response C.uint32_t
  lower_response_val := C.uint32_t(response)
  lower_response = lower_response_val
  var ret C.hello_cosmo_result_wasi_http_http_types_outgoing_stream_void_t
  C.wasi_http_http_types_outgoing_response_write(lower_response, &ret)
  var lift_ret Result[uint32, struct{}]
  if ret.is_err {
    lift_ret.SetErr(struct{}{})
  } else {
    lift_ret_ptr := *(*C.wasi_http_http_types_outgoing_stream_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val uint32
    var lift_ret_val_val uint32
    var lift_ret_val_val_val uint32
    var lift_ret_val_val_val_val uint32
    lift_ret_val_val_val_val = uint32(lift_ret_ptr)
    lift_ret_val_val_val = lift_ret_val_val_val_val
    lift_ret_val_val = lift_ret_val_val_val
    lift_ret_val = lift_ret_val_val
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func WasiHttpHttpTypesDropFutureIncomingResponse(f uint32) {
  var lower_f C.uint32_t
  lower_f_val := C.uint32_t(f)
  lower_f = lower_f_val
  C.wasi_http_http_types_drop_future_incoming_response(lower_f)
}

func WasiHttpHttpTypesFutureIncomingResponseGet(f uint32) Option[Result[uint32, WasiHttpHttpTypesError]] {
  var lower_f C.uint32_t
  lower_f_val := C.uint32_t(f)
  lower_f = lower_f_val
  var ret C.hello_cosmo_option_result_wasi_http_http_types_incoming_response_wasi_http_http_types_error_t
  C.wasi_http_http_types_future_incoming_response_get(lower_f, &ret)
  var lift_ret Option[Result[uint32, WasiHttpHttpTypesError]]
  if ret.is_some {
    var lift_ret_val Result[uint32, WasiHttpHttpTypesError]
    if ret.val.is_err {
      lift_ret_val_ptr := *(*C.wasi_http_http_types_error_t)(unsafe.Pointer(&ret.val.val))
      var lift_ret_val_val WasiHttpHttpTypesError
      if lift_ret_val_ptr.tag == 0 {
        lift_ret_val_val_ptr := *(*C.hello_cosmo_string_t)(unsafe.Pointer(&lift_ret_val_ptr.val))
        var lift_ret_val_val_val string
        lift_ret_val_val_val = C.GoStringN(lift_ret_val_val_ptr.ptr, C.int(lift_ret_val_val_ptr.len))
        lift_ret_val_val = WasiHttpHttpTypesErrorInvalidUrl(lift_ret_val_val_val)
      }
      if lift_ret_val_ptr.tag == 1 {
        lift_ret_val_val_ptr := *(*C.hello_cosmo_string_t)(unsafe.Pointer(&lift_ret_val_ptr.val))
        var lift_ret_val_val_val string
        lift_ret_val_val_val = C.GoStringN(lift_ret_val_val_ptr.ptr, C.int(lift_ret_val_val_ptr.len))
        lift_ret_val_val = WasiHttpHttpTypesErrorTimeoutError(lift_ret_val_val_val)
      }
      if lift_ret_val_ptr.tag == 2 {
        lift_ret_val_val_ptr := *(*C.hello_cosmo_string_t)(unsafe.Pointer(&lift_ret_val_ptr.val))
        var lift_ret_val_val_val string
        lift_ret_val_val_val = C.GoStringN(lift_ret_val_val_ptr.ptr, C.int(lift_ret_val_val_ptr.len))
        lift_ret_val_val = WasiHttpHttpTypesErrorProtocolError(lift_ret_val_val_val)
      }
      if lift_ret_val_ptr.tag == 3 {
        lift_ret_val_val_ptr := *(*C.hello_cosmo_string_t)(unsafe.Pointer(&lift_ret_val_ptr.val))
        var lift_ret_val_val_val string
        lift_ret_val_val_val = C.GoStringN(lift_ret_val_val_ptr.ptr, C.int(lift_ret_val_val_ptr.len))
        lift_ret_val_val = WasiHttpHttpTypesErrorUnexpectedError(lift_ret_val_val_val)
      }
      lift_ret_val.SetErr(lift_ret_val_val)
    } else {
      lift_ret_val_ptr := *(*C.wasi_http_http_types_incoming_response_t)(unsafe.Pointer(&ret.val.val))
      var lift_ret_val_val uint32
      var lift_ret_val_val_val uint32
      lift_ret_val_val_val = uint32(lift_ret_val_ptr)
      lift_ret_val_val = lift_ret_val_val_val
      lift_ret_val.Set(lift_ret_val_val)
    }
    lift_ret.Set(lift_ret_val)
  } else {
    lift_ret.Unset()
  }
  return lift_ret
}

func WasiHttpHttpTypesListenToFutureIncomingResponse(f uint32) uint32 {
  var lower_f C.uint32_t
  lower_f_val := C.uint32_t(f)
  lower_f = lower_f_val
  ret := C.wasi_http_http_types_listen_to_future_incoming_response(lower_f)
  var lift_ret uint32
  var lift_ret_val uint32
  var lift_ret_val_val uint32
  lift_ret_val_val = uint32(ret)
  lift_ret_val = lift_ret_val_val
  lift_ret = lift_ret_val
  return lift_ret
}

// Export functions from wasi:http/incoming-handler
var wasi_http_incoming_handler ExportsWasiHttpIncomingHandler = nil
func SetExportsWasiHttpIncomingHandler(i ExportsWasiHttpIncomingHandler) {
  wasi_http_incoming_handler = i
}
type ExportsWasiHttpIncomingHandler interface {
  Handle(request uint32, response_out uint32) 
}
//export exports_wasi_http_incoming_handler_handle
func ExportsWasiHttpIncomingHandlerHandle(request C.wasi_http_incoming_handler_incoming_request_t, response_out C.wasi_http_incoming_handler_response_outparam_t) {
  var lift_request uint32
  var lift_request_val uint32
  var lift_request_val_val uint32
  lift_request_val_val = uint32(request)
  lift_request_val = lift_request_val_val
  lift_request = lift_request_val
  var lift_response_out uint32
  var lift_response_out_val uint32
  var lift_response_out_val_val uint32
  lift_response_out_val_val = uint32(response_out)
  lift_response_out_val = lift_response_out_val_val
  lift_response_out = lift_response_out_val
  wasi_http_incoming_handler.Handle(lift_request, lift_response_out)
  
}
