just := env_var_or_default("JUST", just_executable())
cargo := env_var_or_default("CARGO", "cargo")
wasm_tools := env_var_or_default("WASM_TOOLS", "wasm-tools")
wash := env_var_or_default("WASH", "wash")
cosmo := env_var_or_default("COSMO", "cosmo")

toml_version := `yq -oy '.version' wasmcloud.toml`
get_constellation_id := "cosmo whoami -o json | jq -r '.user.constellation_ids[0]'"
expected_wasm_signed_component_path := "build/hello_cosmo_rust_s.wasm"
registry_url := "registry.cosmonic.sh"
artifact := "hello-cosmo-rust:" + toml_version

_default:
    {{just}} --list

# Lint
lint:
    {{cargo}} clippy --all-features --all-targets

# Format
fmt:
    {{cargo}} fmt

# Build the WASM components using wasmcloud tooling (wash)
build:
    @echo "[warning] ensure you're using a version of wash newer than v0.20.0"
    @echo "[warning] update your PATH or set the WASH environment variable to change the version of wash used"
    @{{wash}} build

# Build the project, continuously
build-watch:
    {{cargo}} watch --ignore=target -- {{just}} build

# Deploy the wadm manifest
deploy: create-manifest
    @cosmo app deploy ./wadm.yaml

# Push the signed actor to the cosmonic registry
push version=toml_version:
    ../put-creds.sh
    {{cosmo}} reg push {{registry_url}}/$({{get_constellation_id}})/{{artifact}} {{expected_wasm_signed_component_path}}

# Check your component wit
check-component:
    {{wasm_tools}} component wit {{expected_wasm_signed_component_path}}

# Create a declarative application manifest for your component
create-manifest:
    @artifact_url={{registry_url}}/$({{get_constellation_id}})/{{artifact}} && \
    sed -e "s|v0\.1\.0|v0.1.0-rust|g" -e "s|registry\.cosmonic\.sh/<<constellation_id>>/<<actor_name>>:<<version>>|$artifact_url|g" ../wadm.yaml > wadm.yaml
    @echo "Created manifest at ./wadm.yaml!"